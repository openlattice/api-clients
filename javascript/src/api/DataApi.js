/**
 * OpenLattice API
 * OpenLattice API
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@openlattice.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 *
 */


import ApiClient from "../ApiClient";
import DataEdge from '../model/DataEdge';
import DataEdgeKey from '../model/DataEdgeKey';
import DataGraph from '../model/DataGraph';
import DataGraphIds from '../model/DataGraphIds';
import EntityNeighborsFilter from '../model/EntityNeighborsFilter';
import EntitySetSelection from '../model/EntitySetSelection';
import FilteredDataPageDefinition from '../model/FilteredDataPageDefinition';
import InlineObject from '../model/InlineObject';

/**
* Data service.
* @module api/DataApi
* @version 0.0.1
*/
export default class DataApi {

    /**
    * Constructs a new DataApi. 
    * @alias module:api/DataApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instance} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }


    /**
     * Callback function to receive the result of the createAssociations operation.
     * @callback module:api/DataApi~createAssociationsCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: [String]}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new set of associations.
     * @param {module:model/InlineObject} inlineObject 
     * @param {module:api/DataApi~createAssociationsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: [String]}>}
     */
    createAssociations(inlineObject, callback) {
      let postBody = inlineObject;
      // verify the required parameter 'inlineObject' is set
      if (inlineObject === undefined || inlineObject === null) {
        throw new Error("Missing the required parameter 'inlineObject' when calling createAssociations");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = {'String': ['String']};
      return this.apiClient.callApi(
        '/datastore/data/association', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createEdges operation.
     * @callback module:api/DataApi~createEdgesCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new set of associations.
     * @param {Array.<module:model/DataEdgeKey>} dataEdgeKey 
     * @param {module:api/DataApi~createEdgesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    createEdges(dataEdgeKey, callback) {
      let postBody = dataEdgeKey;
      // verify the required parameter 'dataEdgeKey' is set
      if (dataEdgeKey === undefined || dataEdgeKey === null) {
        throw new Error("Missing the required parameter 'dataEdgeKey' when calling createEdges");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/datastore/data/association', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createEntities operation.
     * @callback module:api/DataApi~createEntitiesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates a new set of entities.
     * @param {String} setId 
     * @param {Array.<{String: [String]}>} requestBody 
     * @param {module:api/DataApi~createEntitiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    createEntities(setId, requestBody, callback) {
      let postBody = requestBody;
      // verify the required parameter 'setId' is set
      if (setId === undefined || setId === null) {
        throw new Error("Missing the required parameter 'setId' when calling createEntities");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling createEntities");
      }

      let pathParams = {
      };
      let queryParams = {
        'setId': setId
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/datastore/data/set/', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the createEntityAndAssociationData operation.
     * @callback module:api/DataApi~createEntityAndAssociationDataCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataGraphIds} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Creates entities and assocations
     * @param {module:model/DataGraph} dataGraph 
     * @param {module:api/DataApi~createEntityAndAssociationDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataGraphIds}
     */
    createEntityAndAssociationData(dataGraph, callback) {
      let postBody = dataGraph;
      // verify the required parameter 'dataGraph' is set
      if (dataGraph === undefined || dataGraph === null) {
        throw new Error("Missing the required parameter 'dataGraph' when calling createEntityAndAssociationData");
      }

      let pathParams = {
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = DataGraphIds;
      return this.apiClient.callApi(
        '/datastore/data', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteAllEntitiesFromEntitySet operation.
     * @callback module:api/DataApi~deleteAllEntitiesFromEntitySetCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Clears the Entity matching the given Entity id and all of its neighbor Entities
     * @param {String} entitySetId 
     * @param {module:model/String} type 
     * @param {module:api/DataApi~deleteAllEntitiesFromEntitySetCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteAllEntitiesFromEntitySet(entitySetId, type, callback) {
      let postBody = null;
      // verify the required parameter 'entitySetId' is set
      if (entitySetId === undefined || entitySetId === null) {
        throw new Error("Missing the required parameter 'entitySetId' when calling deleteAllEntitiesFromEntitySet");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling deleteAllEntitiesFromEntitySet");
      }

      let pathParams = {
        'entitySetId': entitySetId
      };
      let queryParams = {
        'type': type
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/datastore/data/set/{entitySetId}/all', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEntities operation.
     * @callback module:api/DataApi~deleteEntitiesCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes multiple entities from an entity set.
     * @param {String} entitySetId 
     * @param {module:model/String} type 
     * @param {Array.<String>} requestBody 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.block 
     * @param {module:api/DataApi~deleteEntitiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    deleteEntities(entitySetId, type, requestBody, opts, callback) {
      opts = opts || {};
      let postBody = requestBody;
      // verify the required parameter 'entitySetId' is set
      if (entitySetId === undefined || entitySetId === null) {
        throw new Error("Missing the required parameter 'entitySetId' when calling deleteEntities");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling deleteEntities");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling deleteEntities");
      }

      let pathParams = {
        'entitySetId': entitySetId
      };
      let queryParams = {
        'type': type,
        'block': opts['block']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/datastore/data/set/{entitySetId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEntitiesAndNeighbors operation.
     * @callback module:api/DataApi~deleteEntitiesAndNeighborsCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes the entities matching the given entity ids and all of its neighbor entities provided in the filter.
     * @param {String} entitySetId 
     * @param {module:model/String} type 
     * @param {Array.<module:model/EntityNeighborsFilter>} entityNeighborsFilter 
     * @param {module:api/DataApi~deleteEntitiesAndNeighborsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    deleteEntitiesAndNeighbors(entitySetId, type, entityNeighborsFilter, callback) {
      let postBody = entityNeighborsFilter;
      // verify the required parameter 'entitySetId' is set
      if (entitySetId === undefined || entitySetId === null) {
        throw new Error("Missing the required parameter 'entitySetId' when calling deleteEntitiesAndNeighbors");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling deleteEntitiesAndNeighbors");
      }
      // verify the required parameter 'entityNeighborsFilter' is set
      if (entityNeighborsFilter === undefined || entityNeighborsFilter === null) {
        throw new Error("Missing the required parameter 'entityNeighborsFilter' when calling deleteEntitiesAndNeighbors");
      }

      let pathParams = {
        'entitySetId': entitySetId
      };
      let queryParams = {
        'type': type
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/datastore/data/set/{entitySetId}/neighbors', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEntity operation.
     * @callback module:api/DataApi~deleteEntityCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a single entity from an entity set.
     * @param {String} entitySetId 
     * @param {String} entityKeyId 
     * @param {module:model/String} type 
     * @param {Object} opts Optional parameters
     * @param {Boolean} opts.block 
     * @param {module:api/DataApi~deleteEntityCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteEntity(entitySetId, entityKeyId, type, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'entitySetId' is set
      if (entitySetId === undefined || entitySetId === null) {
        throw new Error("Missing the required parameter 'entitySetId' when calling deleteEntity");
      }
      // verify the required parameter 'entityKeyId' is set
      if (entityKeyId === undefined || entityKeyId === null) {
        throw new Error("Missing the required parameter 'entityKeyId' when calling deleteEntity");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling deleteEntity");
      }

      let pathParams = {
        'entitySetId': entitySetId,
        'entityKeyId': entityKeyId
      };
      let queryParams = {
        'type': type,
        'block': opts['block']
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/datastore/data/set/{entitySetId}/{entityKeyId}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the deleteEntityProperties operation.
     * @callback module:api/DataApi~deleteEntityPropertiesCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes properties from an entity.
     * @param {String} entitySetId 
     * @param {String} entityKeyId 
     * @param {module:model/String} type 
     * @param {Array.<String>} requestBody 
     * @param {module:api/DataApi~deleteEntityPropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteEntityProperties(entitySetId, entityKeyId, type, requestBody, callback) {
      let postBody = requestBody;
      // verify the required parameter 'entitySetId' is set
      if (entitySetId === undefined || entitySetId === null) {
        throw new Error("Missing the required parameter 'entitySetId' when calling deleteEntityProperties");
      }
      // verify the required parameter 'entityKeyId' is set
      if (entityKeyId === undefined || entityKeyId === null) {
        throw new Error("Missing the required parameter 'entityKeyId' when calling deleteEntityProperties");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling deleteEntityProperties");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling deleteEntityProperties");
      }

      let pathParams = {
        'entitySetId': entitySetId,
        'entityKeyId': entityKeyId
      };
      let queryParams = {
        'type': type
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = ['application/json'];
      let accepts = [];
      let returnType = null;
      return this.apiClient.callApi(
        '/datastore/data/{entitySetId}/{entityKeyId}/properties', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEntity operation.
     * @callback module:api/DataApi~getEntityCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: [String]}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Loads a single entity by its entityKeyId and entitySetId
     * @param {String} entitySetId 
     * @param {String} entityKeyId 
     * @param {module:api/DataApi~getEntityCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: [String]}>}
     */
    getEntity(entitySetId, entityKeyId, callback) {
      let postBody = null;
      // verify the required parameter 'entitySetId' is set
      if (entitySetId === undefined || entitySetId === null) {
        throw new Error("Missing the required parameter 'entitySetId' when calling getEntity");
      }
      // verify the required parameter 'entityKeyId' is set
      if (entityKeyId === undefined || entityKeyId === null) {
        throw new Error("Missing the required parameter 'entityKeyId' when calling getEntity");
      }

      let pathParams = {
        'entitySetId': entitySetId,
        'entityKeyId': entityKeyId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = {'String': ['String']};
      return this.apiClient.callApi(
        '/datastore/data/{entitySetId}/{entityKeyId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEntityPropertyValues operation.
     * @callback module:api/DataApi~getEntityPropertyValuesCallback
     * @param {String} error Error message, if any.
     * @param {Array.<String>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Loads property  values for a single entity by its entityKeyId, entitySetId and propertyTypeId
     * @param {String} entitySetId 
     * @param {String} entityKeyId 
     * @param {String} propertyTypeId 
     * @param {module:api/DataApi~getEntityPropertyValuesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<String>}
     */
    getEntityPropertyValues(entitySetId, entityKeyId, propertyTypeId, callback) {
      let postBody = null;
      // verify the required parameter 'entitySetId' is set
      if (entitySetId === undefined || entitySetId === null) {
        throw new Error("Missing the required parameter 'entitySetId' when calling getEntityPropertyValues");
      }
      // verify the required parameter 'entityKeyId' is set
      if (entityKeyId === undefined || entityKeyId === null) {
        throw new Error("Missing the required parameter 'entityKeyId' when calling getEntityPropertyValues");
      }
      // verify the required parameter 'propertyTypeId' is set
      if (propertyTypeId === undefined || propertyTypeId === null) {
        throw new Error("Missing the required parameter 'propertyTypeId' when calling getEntityPropertyValues");
      }

      let pathParams = {
        'entitySetId': entitySetId,
        'entityKeyId': entityKeyId,
        'propertyTypeId': propertyTypeId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = ['String'];
      return this.apiClient.callApi(
        '/datastore/data/{entitySetId}/{entityKeyId}/{propertyTypeId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the getEntitySetSize operation.
     * @callback module:api/DataApi~getEntitySetSizeCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets the number of entities in an entity set.
     * @param {String} entitySetId 
     * @param {module:api/DataApi~getEntitySetSizeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    getEntitySetSize(entitySetId, callback) {
      let postBody = null;
      // verify the required parameter 'entitySetId' is set
      if (entitySetId === undefined || entitySetId === null) {
        throw new Error("Missing the required parameter 'entitySetId' when calling getEntitySetSize");
      }

      let pathParams = {
        'entitySetId': entitySetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/datastore/data/{entitySetId}/count', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the loadEntitySetData operation.
     * @callback module:api/DataApi~loadEntitySetDataCallback
     * @param {String} error Error message, if any.
     * @param {Array.<{String: [String]}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets an iterable containing the entity data, using property type FQNs as key
     * @param {String} entitySetId 
     * @param {module:api/DataApi~loadEntitySetDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<{String: [String]}>}
     */
    loadEntitySetData(entitySetId, callback) {
      let postBody = null;
      // verify the required parameter 'entitySetId' is set
      if (entitySetId === undefined || entitySetId === null) {
        throw new Error("Missing the required parameter 'entitySetId' when calling loadEntitySetData");
      }

      let pathParams = {
        'entitySetId': entitySetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [{'String': ['String']}];
      return this.apiClient.callApi(
        '/datastore/data/set/{entitySetId}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the loadFilteredEntitySetData operation.
     * @callback module:api/DataApi~loadFilteredEntitySetDataCallback
     * @param {String} error Error message, if any.
     * @param {Array.<{String: [String]}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Loads data in multiple pages
     * @param {String} entitySetId 
     * @param {Array.<module:model/FilteredDataPageDefinition>} filteredDataPageDefinition 
     * @param {module:api/DataApi~loadFilteredEntitySetDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<{String: [String]}>}
     */
    loadFilteredEntitySetData(entitySetId, filteredDataPageDefinition, callback) {
      let postBody = filteredDataPageDefinition;
      // verify the required parameter 'entitySetId' is set
      if (entitySetId === undefined || entitySetId === null) {
        throw new Error("Missing the required parameter 'entitySetId' when calling loadFilteredEntitySetData");
      }
      // verify the required parameter 'filteredDataPageDefinition' is set
      if (filteredDataPageDefinition === undefined || filteredDataPageDefinition === null) {
        throw new Error("Missing the required parameter 'filteredDataPageDefinition' when calling loadFilteredEntitySetData");
      }

      let pathParams = {
        'entitySetId': entitySetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [{'String': ['String']}];
      return this.apiClient.callApi(
        '/datastore/data/set/{entitySetId}/filtered', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the loadLinkedEntitySetBreakdown operation.
     * @callback module:api/DataApi~loadLinkedEntitySetBreakdownCallback
     * @param {String} error Error message, if any.
     * @param {Object.<String, {String: {String: {String: {String: [String]}}}}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Loads a linked entity set breakdown with the selected linked entities and properties.
     * @param {String} linkedEntitySetId 
     * @param {Array.<module:model/EntitySetSelection>} entitySetSelection 
     * @param {module:api/DataApi~loadLinkedEntitySetBreakdownCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Object.<String, {String: {String: {String: {String: [String]}}}}>}
     */
    loadLinkedEntitySetBreakdown(linkedEntitySetId, entitySetSelection, callback) {
      let postBody = entitySetSelection;
      // verify the required parameter 'linkedEntitySetId' is set
      if (linkedEntitySetId === undefined || linkedEntitySetId === null) {
        throw new Error("Missing the required parameter 'linkedEntitySetId' when calling loadLinkedEntitySetBreakdown");
      }
      // verify the required parameter 'entitySetSelection' is set
      if (entitySetSelection === undefined || entitySetSelection === null) {
        throw new Error("Missing the required parameter 'entitySetSelection' when calling loadLinkedEntitySetBreakdown");
      }

      let pathParams = {
        'linkedEntitySetId': linkedEntitySetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = {'String': {'String': {'String': {'String': ['String']}}}};
      return this.apiClient.callApi(
        '/datastore/data/set/{linkedEntitySetId}/detailed', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the loadSelectedEntitySetData operation.
     * @callback module:api/DataApi~loadSelectedEntitySetDataCallback
     * @param {String} error Error message, if any.
     * @param {Array.<{String: [String]}>} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Gets a list of entities by UUIDs
     * @param {String} entitySetId 
     * @param {Array.<module:model/EntitySetSelection>} entitySetSelection 
     * @param {module:api/DataApi~loadSelectedEntitySetDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Array.<{String: [String]}>}
     */
    loadSelectedEntitySetData(entitySetId, entitySetSelection, callback) {
      let postBody = entitySetSelection;
      // verify the required parameter 'entitySetId' is set
      if (entitySetId === undefined || entitySetId === null) {
        throw new Error("Missing the required parameter 'entitySetId' when calling loadSelectedEntitySetData");
      }
      // verify the required parameter 'entitySetSelection' is set
      if (entitySetSelection === undefined || entitySetSelection === null) {
        throw new Error("Missing the required parameter 'entitySetSelection' when calling loadSelectedEntitySetData");
      }

      let pathParams = {
        'entitySetId': entitySetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = [{'String': ['String']}];
      return this.apiClient.callApi(
        '/datastore/data/set/{entitySetId}', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceAssociationData operation.
     * @callback module:api/DataApi~replaceAssociationDataCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replaces Association Data
     * @param {Boolean} partial 
     * @param {Object.<String, {String: {String: DataEdge}}>} requestBody 
     * @param {module:api/DataApi~replaceAssociationDataCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    replaceAssociationData(partial, requestBody, callback) {
      let postBody = requestBody;
      // verify the required parameter 'partial' is set
      if (partial === undefined || partial === null) {
        throw new Error("Missing the required parameter 'partial' when calling replaceAssociationData");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling replaceAssociationData");
      }

      let pathParams = {
      };
      let queryParams = {
        'partial': partial
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/datastore/data/association', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the replaceEntityProperties operation.
     * @callback module:api/DataApi~replaceEntityPropertiesCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Replaces Entity Properties
     * @param {String} entitySetId 
     * @param {Object.<String, {String: {String: [{String: String}]}}>} requestBody 
     * @param {module:api/DataApi~replaceEntityPropertiesCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    replaceEntityProperties(entitySetId, requestBody, callback) {
      let postBody = requestBody;
      // verify the required parameter 'entitySetId' is set
      if (entitySetId === undefined || entitySetId === null) {
        throw new Error("Missing the required parameter 'entitySetId' when calling replaceEntityProperties");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling replaceEntityProperties");
      }

      let pathParams = {
        'entitySetId': entitySetId
      };
      let queryParams = {
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/datastore/data/set/{entitySetId}', 'PATCH',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }

    /**
     * Callback function to receive the result of the updateEntitiesInEntitySet operation.
     * @callback module:api/DataApi~updateEntitiesInEntitySetCallback
     * @param {String} error Error message, if any.
     * @param {Number} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Perform one of the following bulk update operations on entities (type = Merge) adds new properties without affecting existing data, (type = PartialReplace) replaces all values for supplied property types, but does not not affect other property types for an entity, (type = Replace) replaces all entity data with the supplied properties.
     * @param {String} entitySetId 
     * @param {module:model/String} type 
     * @param {Object.<String, {String: {String: [String]}}>} requestBody 
     * @param {module:api/DataApi~updateEntitiesInEntitySetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link Number}
     */
    updateEntitiesInEntitySet(entitySetId, type, requestBody, callback) {
      let postBody = requestBody;
      // verify the required parameter 'entitySetId' is set
      if (entitySetId === undefined || entitySetId === null) {
        throw new Error("Missing the required parameter 'entitySetId' when calling updateEntitiesInEntitySet");
      }
      // verify the required parameter 'type' is set
      if (type === undefined || type === null) {
        throw new Error("Missing the required parameter 'type' when calling updateEntitiesInEntitySet");
      }
      // verify the required parameter 'requestBody' is set
      if (requestBody === undefined || requestBody === null) {
        throw new Error("Missing the required parameter 'requestBody' when calling updateEntitiesInEntitySet");
      }

      let pathParams = {
        'entitySetId': entitySetId
      };
      let queryParams = {
        'type': type
      };
      let headerParams = {
      };
      let formParams = {
      };

      let authNames = ['http_auth', 'openlattice_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = 'Number';
      return this.apiClient.callApi(
        '/datastore/data/set/{entitySetId}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, null, callback
      );
    }


}
