=begin
#OpenLattice API

#OpenLattice API

The version of the OpenAPI document: 0.0.1
Contact: support@openlattice.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0-SNAPSHOT

=end

require 'cgi'

module OpenapiClient
  class MetadataApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Gets the dataset column metadata objects using data ID and column ID
    # @param data_id [String] 
    # @param column_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [DataSetColumnMetadata]
    def get_data_set_column_metadata(data_id, column_id, opts = {})
      data, _status_code, _headers = get_data_set_column_metadata_with_http_info(data_id, column_id, opts)
      data
    end

    # Gets the dataset column metadata objects using data ID and column ID
    # @param data_id [String] 
    # @param column_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DataSetColumnMetadata, Integer, Hash)>] DataSetColumnMetadata data, response status code and response headers
    def get_data_set_column_metadata_with_http_info(data_id, column_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MetadataApi.get_data_set_column_metadata ...'
      end
      # verify the required parameter 'data_id' is set
      if @api_client.config.client_side_validation && data_id.nil?
        fail ArgumentError, "Missing the required parameter 'data_id' when calling MetadataApi.get_data_set_column_metadata"
      end
      # verify the required parameter 'column_id' is set
      if @api_client.config.client_side_validation && column_id.nil?
        fail ArgumentError, "Missing the required parameter 'column_id' when calling MetadataApi.get_data_set_column_metadata"
      end
      # resource path
      local_var_path = '/datastore/metadata/columns/{dataId}/{columnId}'.sub('{' + 'dataId' + '}', CGI.escape(data_id.to_s)).sub('{' + 'columnId' + '}', CGI.escape(column_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'DataSetColumnMetadata' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MetadataApi#get_data_set_column_metadata\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets all data set column metadata objects that caller has READ on that belong to given data set ids
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :request_body 
    # @return [Hash<String, Array<DataSetColumnMetadata>>]
    def get_data_set_columns_metadata(opts = {})
      data, _status_code, _headers = get_data_set_columns_metadata_with_http_info(opts)
      data
    end

    # Gets all data set column metadata objects that caller has READ on that belong to given data set ids
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :request_body 
    # @return [Array<(Hash<String, Array<DataSetColumnMetadata>>, Integer, Hash)>] Hash<String, Array<DataSetColumnMetadata>> data, response status code and response headers
    def get_data_set_columns_metadata_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MetadataApi.get_data_set_columns_metadata ...'
      end
      # resource path
      local_var_path = '/datastore/metadata/columns'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'request_body']) 

      # return_type
      return_type = opts[:return_type] || 'Hash<String, Array<DataSetColumnMetadata>>' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MetadataApi#get_data_set_columns_metadata\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets dataset metadata object with given data set ID
    # @param data_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [DataSetMetadata]
    def get_data_set_metadata(data_id, opts = {})
      data, _status_code, _headers = get_data_set_metadata_with_http_info(data_id, opts)
      data
    end

    # Gets dataset metadata object with given data set ID
    # @param data_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DataSetMetadata, Integer, Hash)>] DataSetMetadata data, response status code and response headers
    def get_data_set_metadata_with_http_info(data_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MetadataApi.get_data_set_metadata ...'
      end
      # verify the required parameter 'data_id' is set
      if @api_client.config.client_side_validation && data_id.nil?
        fail ArgumentError, "Missing the required parameter 'data_id' when calling MetadataApi.get_data_set_metadata"
      end
      # resource path
      local_var_path = '/datastore/metadata/datasets/{dataId}'.sub('{' + 'dataId' + '}', CGI.escape(data_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'DataSetMetadata' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MetadataApi#get_data_set_metadata\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the dataset metadata objects given data set ids the caller has READ permissions on
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :request_body 
    # @return [Hash<String, DataSetMetadata>]
    def get_data_sets_metadata(opts = {})
      data, _status_code, _headers = get_data_sets_metadata_with_http_info(opts)
      data
    end

    # Gets the dataset metadata objects given data set ids the caller has READ permissions on
    # @param [Hash] opts the optional parameters
    # @option opts [Array<String>] :request_body 
    # @return [Array<(Hash<String, DataSetMetadata>, Integer, Hash)>] Hash<String, DataSetMetadata> data, response status code and response headers
    def get_data_sets_metadata_with_http_info(opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MetadataApi.get_data_sets_metadata ...'
      end
      # resource path
      local_var_path = '/datastore/metadata/datasets'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'request_body']) 

      # return_type
      return_type = opts[:return_type] || 'Hash<String, DataSetMetadata>' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MetadataApi#get_data_sets_metadata\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets all data set column metadata objects that caller has READ on that belong to given data set ids
    # @param organization_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, DataSetMetadata>]
    def get_organization_data_sets_metadata(organization_id, opts = {})
      data, _status_code, _headers = get_organization_data_sets_metadata_with_http_info(organization_id, opts)
      data
    end

    # Gets all data set column metadata objects that caller has READ on that belong to given data set ids
    # @param organization_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, DataSetMetadata>, Integer, Hash)>] Hash<String, DataSetMetadata> data, response status code and response headers
    def get_organization_data_sets_metadata_with_http_info(organization_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MetadataApi.get_organization_data_sets_metadata ...'
      end
      # verify the required parameter 'organization_id' is set
      if @api_client.config.client_side_validation && organization_id.nil?
        fail ArgumentError, "Missing the required parameter 'organization_id' when calling MetadataApi.get_organization_data_sets_metadata"
      end
      # resource path
      local_var_path = '/datastore/metadata/datasets/organizations/{organizationId}'.sub('{' + 'organizationId' + '}', CGI.escape(organization_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Hash<String, DataSetMetadata>' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MetadataApi#get_organization_data_sets_metadata\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Applies the given metadata updates to the data set column given dataset and column Ids. Must be OWNER of the column.
    # @param data_id [String] 
    # @param column_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [DataMetadata] :data_metadata 
    # @return [nil]
    def update_data_set_column_metadata(data_id, column_id, opts = {})
      update_data_set_column_metadata_with_http_info(data_id, column_id, opts)
      nil
    end

    # Applies the given metadata updates to the data set column given dataset and column Ids. Must be OWNER of the column.
    # @param data_id [String] 
    # @param column_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [DataMetadata] :data_metadata 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_data_set_column_metadata_with_http_info(data_id, column_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MetadataApi.update_data_set_column_metadata ...'
      end
      # verify the required parameter 'data_id' is set
      if @api_client.config.client_side_validation && data_id.nil?
        fail ArgumentError, "Missing the required parameter 'data_id' when calling MetadataApi.update_data_set_column_metadata"
      end
      # verify the required parameter 'column_id' is set
      if @api_client.config.client_side_validation && column_id.nil?
        fail ArgumentError, "Missing the required parameter 'column_id' when calling MetadataApi.update_data_set_column_metadata"
      end
      # resource path
      local_var_path = '/datastore/metadata/update/{dataId}/{columnId}'.sub('{' + 'dataId' + '}', CGI.escape(data_id.to_s)).sub('{' + 'columnId' + '}', CGI.escape(column_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'data_metadata']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MetadataApi#update_data_set_column_metadata\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Applies the given metadata updates to the data set given data set id. Must be OWNER of the dataset.
    # @param data_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [DataMetadata] :data_metadata 
    # @return [nil]
    def update_data_set_metadata(data_id, opts = {})
      update_data_set_metadata_with_http_info(data_id, opts)
      nil
    end

    # Applies the given metadata updates to the data set given data set id. Must be OWNER of the dataset.
    # @param data_id [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [DataMetadata] :data_metadata 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def update_data_set_metadata_with_http_info(data_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: MetadataApi.update_data_set_metadata ...'
      end
      # verify the required parameter 'data_id' is set
      if @api_client.config.client_side_validation && data_id.nil?
        fail ArgumentError, "Missing the required parameter 'data_id' when calling MetadataApi.update_data_set_metadata"
      end
      # resource path
      local_var_path = '/datastore/metadata/update/{dataId}'.sub('{' + 'dataId' + '}', CGI.escape(data_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(opts[:'data_metadata']) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: MetadataApi#update_data_set_metadata\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
