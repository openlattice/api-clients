=begin
#OpenLattice API

#OpenLattice API

The version of the OpenAPI document: 0.0.1
Contact: support@openlattice.com
Generated by: https://openapi-generator.tech
OpenAPI Generator version: 5.0.0-SNAPSHOT

=end

require 'cgi'

module OpenapiClient
  class DataApi
    attr_accessor :api_client

    def initialize(api_client = ApiClient.default)
      @api_client = api_client
    end
    # Creates a new set of associations.
    # @param inline_object [InlineObject] 
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, Array<String>>]
    def create_associations(inline_object, opts = {})
      data, _status_code, _headers = create_associations_with_http_info(inline_object, opts)
      data
    end

    # Creates a new set of associations.
    # @param inline_object [InlineObject] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, Array<String>>, Integer, Hash)>] Hash<String, Array<String>> data, response status code and response headers
    def create_associations_with_http_info(inline_object, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataApi.create_associations ...'
      end
      # verify the required parameter 'inline_object' is set
      if @api_client.config.client_side_validation && inline_object.nil?
        fail ArgumentError, "Missing the required parameter 'inline_object' when calling DataApi.create_associations"
      end
      # resource path
      local_var_path = '/datastore/data/association'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(inline_object) 

      # return_type
      return_type = opts[:return_type] || 'Hash<String, Array<String>>' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataApi#create_associations\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a new set of associations.
    # @param data_edge_key [Array<DataEdgeKey>] 
    # @param [Hash] opts the optional parameters
    # @return [Integer]
    def create_edges(data_edge_key, opts = {})
      data, _status_code, _headers = create_edges_with_http_info(data_edge_key, opts)
      data
    end

    # Creates a new set of associations.
    # @param data_edge_key [Array<DataEdgeKey>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Integer, Integer, Hash)>] Integer data, response status code and response headers
    def create_edges_with_http_info(data_edge_key, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataApi.create_edges ...'
      end
      # verify the required parameter 'data_edge_key' is set
      if @api_client.config.client_side_validation && data_edge_key.nil?
        fail ArgumentError, "Missing the required parameter 'data_edge_key' when calling DataApi.create_edges"
      end
      # resource path
      local_var_path = '/datastore/data/association'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(data_edge_key) 

      # return_type
      return_type = opts[:return_type] || 'Integer' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataApi#create_edges\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates a new set of entities.
    # @param set_id [String] 
    # @param request_body [Array<Hash<String, Array<String>>>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<String>]
    def create_entities(set_id, request_body, opts = {})
      data, _status_code, _headers = create_entities_with_http_info(set_id, request_body, opts)
      data
    end

    # Creates a new set of entities.
    # @param set_id [String] 
    # @param request_body [Array<Hash<String, Array<String>>>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<String>, Integer, Hash)>] Array<String> data, response status code and response headers
    def create_entities_with_http_info(set_id, request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataApi.create_entities ...'
      end
      # verify the required parameter 'set_id' is set
      if @api_client.config.client_side_validation && set_id.nil?
        fail ArgumentError, "Missing the required parameter 'set_id' when calling DataApi.create_entities"
      end
      # verify the required parameter 'request_body' is set
      if @api_client.config.client_side_validation && request_body.nil?
        fail ArgumentError, "Missing the required parameter 'request_body' when calling DataApi.create_entities"
      end
      # resource path
      local_var_path = '/datastore/data/set/'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'setId'] = set_id

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(request_body) 

      # return_type
      return_type = opts[:return_type] || 'Array<String>' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataApi#create_entities\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Creates entities and assocations
    # @param data_graph [DataGraph] 
    # @param [Hash] opts the optional parameters
    # @return [DataGraphIds]
    def create_entity_and_association_data(data_graph, opts = {})
      data, _status_code, _headers = create_entity_and_association_data_with_http_info(data_graph, opts)
      data
    end

    # Creates entities and assocations
    # @param data_graph [DataGraph] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(DataGraphIds, Integer, Hash)>] DataGraphIds data, response status code and response headers
    def create_entity_and_association_data_with_http_info(data_graph, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataApi.create_entity_and_association_data ...'
      end
      # verify the required parameter 'data_graph' is set
      if @api_client.config.client_side_validation && data_graph.nil?
        fail ArgumentError, "Missing the required parameter 'data_graph' when calling DataApi.create_entity_and_association_data"
      end
      # resource path
      local_var_path = '/datastore/data'

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(data_graph) 

      # return_type
      return_type = opts[:return_type] || 'DataGraphIds' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataApi#create_entity_and_association_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Clears the Entity matching the given Entity id and all of its neighbor Entities
    # @param entity_set_id [String] 
    # @param type [String] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_all_entities_from_entity_set(entity_set_id, type, opts = {})
      delete_all_entities_from_entity_set_with_http_info(entity_set_id, type, opts)
      nil
    end

    # Clears the Entity matching the given Entity id and all of its neighbor Entities
    # @param entity_set_id [String] 
    # @param type [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_all_entities_from_entity_set_with_http_info(entity_set_id, type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataApi.delete_all_entities_from_entity_set ...'
      end
      # verify the required parameter 'entity_set_id' is set
      if @api_client.config.client_side_validation && entity_set_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_set_id' when calling DataApi.delete_all_entities_from_entity_set"
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling DataApi.delete_all_entities_from_entity_set"
      end
      # verify enum value
      allowable_values = ["Soft", "Hard"]
      if @api_client.config.client_side_validation && !allowable_values.include?(type)
        fail ArgumentError, "invalid value for \"type\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/datastore/data/set/{entitySetId}/all'.sub('{' + 'entitySetId' + '}', CGI.escape(entity_set_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'type'] = type

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataApi#delete_all_entities_from_entity_set\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes multiple entities from an entity set.
    # @param entity_set_id [String] 
    # @param type [String] 
    # @param request_body [Array<String>] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :block 
    # @return [Integer]
    def delete_entities(entity_set_id, type, request_body, opts = {})
      data, _status_code, _headers = delete_entities_with_http_info(entity_set_id, type, request_body, opts)
      data
    end

    # Deletes multiple entities from an entity set.
    # @param entity_set_id [String] 
    # @param type [String] 
    # @param request_body [Array<String>] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :block 
    # @return [Array<(Integer, Integer, Hash)>] Integer data, response status code and response headers
    def delete_entities_with_http_info(entity_set_id, type, request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataApi.delete_entities ...'
      end
      # verify the required parameter 'entity_set_id' is set
      if @api_client.config.client_side_validation && entity_set_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_set_id' when calling DataApi.delete_entities"
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling DataApi.delete_entities"
      end
      # verify enum value
      allowable_values = ["Soft", "Hard"]
      if @api_client.config.client_side_validation && !allowable_values.include?(type)
        fail ArgumentError, "invalid value for \"type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'request_body' is set
      if @api_client.config.client_side_validation && request_body.nil?
        fail ArgumentError, "Missing the required parameter 'request_body' when calling DataApi.delete_entities"
      end
      # resource path
      local_var_path = '/datastore/data/set/{entitySetId}'.sub('{' + 'entitySetId' + '}', CGI.escape(entity_set_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'type'] = type
      query_params[:'block'] = opts[:'block'] if !opts[:'block'].nil?

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(request_body) 

      # return_type
      return_type = opts[:return_type] || 'Integer' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataApi#delete_entities\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes the entities matching the given entity ids and all of its neighbor entities provided in the filter.
    # @param entity_set_id [String] 
    # @param type [String] 
    # @param entity_neighbors_filter [Array<EntityNeighborsFilter>] 
    # @param [Hash] opts the optional parameters
    # @return [Integer]
    def delete_entities_and_neighbors(entity_set_id, type, entity_neighbors_filter, opts = {})
      data, _status_code, _headers = delete_entities_and_neighbors_with_http_info(entity_set_id, type, entity_neighbors_filter, opts)
      data
    end

    # Deletes the entities matching the given entity ids and all of its neighbor entities provided in the filter.
    # @param entity_set_id [String] 
    # @param type [String] 
    # @param entity_neighbors_filter [Array<EntityNeighborsFilter>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Integer, Integer, Hash)>] Integer data, response status code and response headers
    def delete_entities_and_neighbors_with_http_info(entity_set_id, type, entity_neighbors_filter, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataApi.delete_entities_and_neighbors ...'
      end
      # verify the required parameter 'entity_set_id' is set
      if @api_client.config.client_side_validation && entity_set_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_set_id' when calling DataApi.delete_entities_and_neighbors"
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling DataApi.delete_entities_and_neighbors"
      end
      # verify enum value
      allowable_values = ["Soft", "Hard"]
      if @api_client.config.client_side_validation && !allowable_values.include?(type)
        fail ArgumentError, "invalid value for \"type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'entity_neighbors_filter' is set
      if @api_client.config.client_side_validation && entity_neighbors_filter.nil?
        fail ArgumentError, "Missing the required parameter 'entity_neighbors_filter' when calling DataApi.delete_entities_and_neighbors"
      end
      # resource path
      local_var_path = '/datastore/data/set/{entitySetId}/neighbors'.sub('{' + 'entitySetId' + '}', CGI.escape(entity_set_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'type'] = type

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(entity_neighbors_filter) 

      # return_type
      return_type = opts[:return_type] || 'Integer' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataApi#delete_entities_and_neighbors\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes a single entity from an entity set.
    # @param entity_set_id [String] 
    # @param entity_key_id [String] 
    # @param type [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :block 
    # @return [nil]
    def delete_entity(entity_set_id, entity_key_id, type, opts = {})
      delete_entity_with_http_info(entity_set_id, entity_key_id, type, opts)
      nil
    end

    # Deletes a single entity from an entity set.
    # @param entity_set_id [String] 
    # @param entity_key_id [String] 
    # @param type [String] 
    # @param [Hash] opts the optional parameters
    # @option opts [Boolean] :block 
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_entity_with_http_info(entity_set_id, entity_key_id, type, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataApi.delete_entity ...'
      end
      # verify the required parameter 'entity_set_id' is set
      if @api_client.config.client_side_validation && entity_set_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_set_id' when calling DataApi.delete_entity"
      end
      # verify the required parameter 'entity_key_id' is set
      if @api_client.config.client_side_validation && entity_key_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_key_id' when calling DataApi.delete_entity"
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling DataApi.delete_entity"
      end
      # verify enum value
      allowable_values = ["Soft", "Hard"]
      if @api_client.config.client_side_validation && !allowable_values.include?(type)
        fail ArgumentError, "invalid value for \"type\", must be one of #{allowable_values}"
      end
      # resource path
      local_var_path = '/datastore/data/set/{entitySetId}/{entityKeyId}'.sub('{' + 'entitySetId' + '}', CGI.escape(entity_set_id.to_s)).sub('{' + 'entityKeyId' + '}', CGI.escape(entity_key_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'type'] = type
      query_params[:'block'] = opts[:'block'] if !opts[:'block'].nil?

      # header parameters
      header_params = opts[:header_params] || {}

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataApi#delete_entity\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Deletes properties from an entity.
    # @param entity_set_id [String] 
    # @param entity_key_id [String] 
    # @param type [String] 
    # @param request_body [Array<String>] 
    # @param [Hash] opts the optional parameters
    # @return [nil]
    def delete_entity_properties(entity_set_id, entity_key_id, type, request_body, opts = {})
      delete_entity_properties_with_http_info(entity_set_id, entity_key_id, type, request_body, opts)
      nil
    end

    # Deletes properties from an entity.
    # @param entity_set_id [String] 
    # @param entity_key_id [String] 
    # @param type [String] 
    # @param request_body [Array<String>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(nil, Integer, Hash)>] nil, response status code and response headers
    def delete_entity_properties_with_http_info(entity_set_id, entity_key_id, type, request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataApi.delete_entity_properties ...'
      end
      # verify the required parameter 'entity_set_id' is set
      if @api_client.config.client_side_validation && entity_set_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_set_id' when calling DataApi.delete_entity_properties"
      end
      # verify the required parameter 'entity_key_id' is set
      if @api_client.config.client_side_validation && entity_key_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_key_id' when calling DataApi.delete_entity_properties"
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling DataApi.delete_entity_properties"
      end
      # verify enum value
      allowable_values = ["Soft", "Hard"]
      if @api_client.config.client_side_validation && !allowable_values.include?(type)
        fail ArgumentError, "invalid value for \"type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'request_body' is set
      if @api_client.config.client_side_validation && request_body.nil?
        fail ArgumentError, "Missing the required parameter 'request_body' when calling DataApi.delete_entity_properties"
      end
      # resource path
      local_var_path = '/datastore/data/{entitySetId}/{entityKeyId}/properties'.sub('{' + 'entitySetId' + '}', CGI.escape(entity_set_id.to_s)).sub('{' + 'entityKeyId' + '}', CGI.escape(entity_key_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'type'] = type

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(request_body) 

      # return_type
      return_type = opts[:return_type] 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:DELETE, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataApi#delete_entity_properties\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Loads a single entity by its entityKeyId and entitySetId
    # @param entity_set_id [String] 
    # @param entity_key_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, Array<String>>]
    def get_entity(entity_set_id, entity_key_id, opts = {})
      data, _status_code, _headers = get_entity_with_http_info(entity_set_id, entity_key_id, opts)
      data
    end

    # Loads a single entity by its entityKeyId and entitySetId
    # @param entity_set_id [String] 
    # @param entity_key_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, Array<String>>, Integer, Hash)>] Hash<String, Array<String>> data, response status code and response headers
    def get_entity_with_http_info(entity_set_id, entity_key_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataApi.get_entity ...'
      end
      # verify the required parameter 'entity_set_id' is set
      if @api_client.config.client_side_validation && entity_set_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_set_id' when calling DataApi.get_entity"
      end
      # verify the required parameter 'entity_key_id' is set
      if @api_client.config.client_side_validation && entity_key_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_key_id' when calling DataApi.get_entity"
      end
      # resource path
      local_var_path = '/datastore/data/{entitySetId}/{entityKeyId}'.sub('{' + 'entitySetId' + '}', CGI.escape(entity_set_id.to_s)).sub('{' + 'entityKeyId' + '}', CGI.escape(entity_key_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Hash<String, Array<String>>' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataApi#get_entity\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Loads property  values for a single entity by its entityKeyId, entitySetId and propertyTypeId
    # @param entity_set_id [String] 
    # @param entity_key_id [String] 
    # @param property_type_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<String>]
    def get_entity_property_values(entity_set_id, entity_key_id, property_type_id, opts = {})
      data, _status_code, _headers = get_entity_property_values_with_http_info(entity_set_id, entity_key_id, property_type_id, opts)
      data
    end

    # Loads property  values for a single entity by its entityKeyId, entitySetId and propertyTypeId
    # @param entity_set_id [String] 
    # @param entity_key_id [String] 
    # @param property_type_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<String>, Integer, Hash)>] Array<String> data, response status code and response headers
    def get_entity_property_values_with_http_info(entity_set_id, entity_key_id, property_type_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataApi.get_entity_property_values ...'
      end
      # verify the required parameter 'entity_set_id' is set
      if @api_client.config.client_side_validation && entity_set_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_set_id' when calling DataApi.get_entity_property_values"
      end
      # verify the required parameter 'entity_key_id' is set
      if @api_client.config.client_side_validation && entity_key_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_key_id' when calling DataApi.get_entity_property_values"
      end
      # verify the required parameter 'property_type_id' is set
      if @api_client.config.client_side_validation && property_type_id.nil?
        fail ArgumentError, "Missing the required parameter 'property_type_id' when calling DataApi.get_entity_property_values"
      end
      # resource path
      local_var_path = '/datastore/data/{entitySetId}/{entityKeyId}/{propertyTypeId}'.sub('{' + 'entitySetId' + '}', CGI.escape(entity_set_id.to_s)).sub('{' + 'entityKeyId' + '}', CGI.escape(entity_key_id.to_s)).sub('{' + 'propertyTypeId' + '}', CGI.escape(property_type_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<String>' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataApi#get_entity_property_values\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets the number of entities in an entity set.
    # @param entity_set_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Integer]
    def get_entity_set_size(entity_set_id, opts = {})
      data, _status_code, _headers = get_entity_set_size_with_http_info(entity_set_id, opts)
      data
    end

    # Gets the number of entities in an entity set.
    # @param entity_set_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Integer, Integer, Hash)>] Integer data, response status code and response headers
    def get_entity_set_size_with_http_info(entity_set_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataApi.get_entity_set_size ...'
      end
      # verify the required parameter 'entity_set_id' is set
      if @api_client.config.client_side_validation && entity_set_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_set_id' when calling DataApi.get_entity_set_size"
      end
      # resource path
      local_var_path = '/datastore/data/{entitySetId}/count'.sub('{' + 'entitySetId' + '}', CGI.escape(entity_set_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Integer' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataApi#get_entity_set_size\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets an iterable containing the entity data, using property type FQNs as key
    # @param entity_set_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<Hash<String, Array<String>>>]
    def load_entity_set_data(entity_set_id, opts = {})
      data, _status_code, _headers = load_entity_set_data_with_http_info(entity_set_id, opts)
      data
    end

    # Gets an iterable containing the entity data, using property type FQNs as key
    # @param entity_set_id [String] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Hash<String, Array<String>>>, Integer, Hash)>] Array<Hash<String, Array<String>>> data, response status code and response headers
    def load_entity_set_data_with_http_info(entity_set_id, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataApi.load_entity_set_data ...'
      end
      # verify the required parameter 'entity_set_id' is set
      if @api_client.config.client_side_validation && entity_set_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_set_id' when calling DataApi.load_entity_set_data"
      end
      # resource path
      local_var_path = '/datastore/data/set/{entitySetId}'.sub('{' + 'entitySetId' + '}', CGI.escape(entity_set_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] 

      # return_type
      return_type = opts[:return_type] || 'Array<Hash<String, Array<String>>>' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:GET, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataApi#load_entity_set_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Loads data in multiple pages
    # @param entity_set_id [String] 
    # @param filtered_data_page_definition [Array<FilteredDataPageDefinition>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<Hash<String, Array<String>>>]
    def load_filtered_entity_set_data(entity_set_id, filtered_data_page_definition, opts = {})
      data, _status_code, _headers = load_filtered_entity_set_data_with_http_info(entity_set_id, filtered_data_page_definition, opts)
      data
    end

    # Loads data in multiple pages
    # @param entity_set_id [String] 
    # @param filtered_data_page_definition [Array<FilteredDataPageDefinition>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Hash<String, Array<String>>>, Integer, Hash)>] Array<Hash<String, Array<String>>> data, response status code and response headers
    def load_filtered_entity_set_data_with_http_info(entity_set_id, filtered_data_page_definition, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataApi.load_filtered_entity_set_data ...'
      end
      # verify the required parameter 'entity_set_id' is set
      if @api_client.config.client_side_validation && entity_set_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_set_id' when calling DataApi.load_filtered_entity_set_data"
      end
      # verify the required parameter 'filtered_data_page_definition' is set
      if @api_client.config.client_side_validation && filtered_data_page_definition.nil?
        fail ArgumentError, "Missing the required parameter 'filtered_data_page_definition' when calling DataApi.load_filtered_entity_set_data"
      end
      # resource path
      local_var_path = '/datastore/data/set/{entitySetId}/filtered'.sub('{' + 'entitySetId' + '}', CGI.escape(entity_set_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(filtered_data_page_definition) 

      # return_type
      return_type = opts[:return_type] || 'Array<Hash<String, Array<String>>>' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataApi#load_filtered_entity_set_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Loads a linked entity set breakdown with the selected linked entities and properties.
    # @param linked_entity_set_id [String] 
    # @param entity_set_selection [Array<EntitySetSelection>] 
    # @param [Hash] opts the optional parameters
    # @return [Hash<String, Hash<String, Hash<String, Hash<String, Array<String>>>>>]
    def load_linked_entity_set_breakdown(linked_entity_set_id, entity_set_selection, opts = {})
      data, _status_code, _headers = load_linked_entity_set_breakdown_with_http_info(linked_entity_set_id, entity_set_selection, opts)
      data
    end

    # Loads a linked entity set breakdown with the selected linked entities and properties.
    # @param linked_entity_set_id [String] 
    # @param entity_set_selection [Array<EntitySetSelection>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Hash<String, Hash<String, Hash<String, Hash<String, Array<String>>>>>, Integer, Hash)>] Hash<String, Hash<String, Hash<String, Hash<String, Array<String>>>>> data, response status code and response headers
    def load_linked_entity_set_breakdown_with_http_info(linked_entity_set_id, entity_set_selection, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataApi.load_linked_entity_set_breakdown ...'
      end
      # verify the required parameter 'linked_entity_set_id' is set
      if @api_client.config.client_side_validation && linked_entity_set_id.nil?
        fail ArgumentError, "Missing the required parameter 'linked_entity_set_id' when calling DataApi.load_linked_entity_set_breakdown"
      end
      # verify the required parameter 'entity_set_selection' is set
      if @api_client.config.client_side_validation && entity_set_selection.nil?
        fail ArgumentError, "Missing the required parameter 'entity_set_selection' when calling DataApi.load_linked_entity_set_breakdown"
      end
      # resource path
      local_var_path = '/datastore/data/set/{linkedEntitySetId}/detailed'.sub('{' + 'linkedEntitySetId' + '}', CGI.escape(linked_entity_set_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(entity_set_selection) 

      # return_type
      return_type = opts[:return_type] || 'Hash<String, Hash<String, Hash<String, Hash<String, Array<String>>>>>' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataApi#load_linked_entity_set_breakdown\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Gets a list of entities by UUIDs
    # @param entity_set_id [String] 
    # @param entity_set_selection [Array<EntitySetSelection>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<Hash<String, Array<String>>>]
    def load_selected_entity_set_data(entity_set_id, entity_set_selection, opts = {})
      data, _status_code, _headers = load_selected_entity_set_data_with_http_info(entity_set_id, entity_set_selection, opts)
      data
    end

    # Gets a list of entities by UUIDs
    # @param entity_set_id [String] 
    # @param entity_set_selection [Array<EntitySetSelection>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Array<Hash<String, Array<String>>>, Integer, Hash)>] Array<Hash<String, Array<String>>> data, response status code and response headers
    def load_selected_entity_set_data_with_http_info(entity_set_id, entity_set_selection, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataApi.load_selected_entity_set_data ...'
      end
      # verify the required parameter 'entity_set_id' is set
      if @api_client.config.client_side_validation && entity_set_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_set_id' when calling DataApi.load_selected_entity_set_data"
      end
      # verify the required parameter 'entity_set_selection' is set
      if @api_client.config.client_side_validation && entity_set_selection.nil?
        fail ArgumentError, "Missing the required parameter 'entity_set_selection' when calling DataApi.load_selected_entity_set_data"
      end
      # resource path
      local_var_path = '/datastore/data/set/{entitySetId}'.sub('{' + 'entitySetId' + '}', CGI.escape(entity_set_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(entity_set_selection) 

      # return_type
      return_type = opts[:return_type] || 'Array<Hash<String, Array<String>>>' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:POST, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataApi#load_selected_entity_set_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Replaces Association Data
    # @param partial [Boolean] 
    # @param request_body [Hash<String, Hash<String, DataEdge>>] 
    # @param [Hash] opts the optional parameters
    # @return [Integer]
    def replace_association_data(partial, request_body, opts = {})
      data, _status_code, _headers = replace_association_data_with_http_info(partial, request_body, opts)
      data
    end

    # Replaces Association Data
    # @param partial [Boolean] 
    # @param request_body [Hash<String, Hash<String, DataEdge>>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Integer, Integer, Hash)>] Integer data, response status code and response headers
    def replace_association_data_with_http_info(partial, request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataApi.replace_association_data ...'
      end
      # verify the required parameter 'partial' is set
      if @api_client.config.client_side_validation && partial.nil?
        fail ArgumentError, "Missing the required parameter 'partial' when calling DataApi.replace_association_data"
      end
      # verify the required parameter 'request_body' is set
      if @api_client.config.client_side_validation && request_body.nil?
        fail ArgumentError, "Missing the required parameter 'request_body' when calling DataApi.replace_association_data"
      end
      # resource path
      local_var_path = '/datastore/data/association'

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'partial'] = partial

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(request_body) 

      # return_type
      return_type = opts[:return_type] || 'Integer' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataApi#replace_association_data\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Replaces Entity Properties
    # @param entity_set_id [String] 
    # @param request_body [Hash<String, Hash<String, Array<Hash<String, String>>>>] 
    # @param [Hash] opts the optional parameters
    # @return [Integer]
    def replace_entity_properties(entity_set_id, request_body, opts = {})
      data, _status_code, _headers = replace_entity_properties_with_http_info(entity_set_id, request_body, opts)
      data
    end

    # Replaces Entity Properties
    # @param entity_set_id [String] 
    # @param request_body [Hash<String, Hash<String, Array<Hash<String, String>>>>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Integer, Integer, Hash)>] Integer data, response status code and response headers
    def replace_entity_properties_with_http_info(entity_set_id, request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataApi.replace_entity_properties ...'
      end
      # verify the required parameter 'entity_set_id' is set
      if @api_client.config.client_side_validation && entity_set_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_set_id' when calling DataApi.replace_entity_properties"
      end
      # verify the required parameter 'request_body' is set
      if @api_client.config.client_side_validation && request_body.nil?
        fail ArgumentError, "Missing the required parameter 'request_body' when calling DataApi.replace_entity_properties"
      end
      # resource path
      local_var_path = '/datastore/data/set/{entitySetId}'.sub('{' + 'entitySetId' + '}', CGI.escape(entity_set_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(request_body) 

      # return_type
      return_type = opts[:return_type] || 'Integer' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PATCH, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataApi#replace_entity_properties\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end

    # Perform one of the following bulk update operations on entities (type = Merge) adds new properties without affecting existing data, (type = PartialReplace) replaces all values for supplied property types, but does not not affect other property types for an entity, (type = Replace) replaces all entity data with the supplied properties.
    # @param entity_set_id [String] 
    # @param type [String] 
    # @param request_body [Hash<String, Hash<String, Array<String>>>] 
    # @param [Hash] opts the optional parameters
    # @return [Integer]
    def update_entities_in_entity_set(entity_set_id, type, request_body, opts = {})
      data, _status_code, _headers = update_entities_in_entity_set_with_http_info(entity_set_id, type, request_body, opts)
      data
    end

    # Perform one of the following bulk update operations on entities (type &#x3D; Merge) adds new properties without affecting existing data, (type &#x3D; PartialReplace) replaces all values for supplied property types, but does not not affect other property types for an entity, (type &#x3D; Replace) replaces all entity data with the supplied properties.
    # @param entity_set_id [String] 
    # @param type [String] 
    # @param request_body [Hash<String, Hash<String, Array<String>>>] 
    # @param [Hash] opts the optional parameters
    # @return [Array<(Integer, Integer, Hash)>] Integer data, response status code and response headers
    def update_entities_in_entity_set_with_http_info(entity_set_id, type, request_body, opts = {})
      if @api_client.config.debugging
        @api_client.config.logger.debug 'Calling API: DataApi.update_entities_in_entity_set ...'
      end
      # verify the required parameter 'entity_set_id' is set
      if @api_client.config.client_side_validation && entity_set_id.nil?
        fail ArgumentError, "Missing the required parameter 'entity_set_id' when calling DataApi.update_entities_in_entity_set"
      end
      # verify the required parameter 'type' is set
      if @api_client.config.client_side_validation && type.nil?
        fail ArgumentError, "Missing the required parameter 'type' when calling DataApi.update_entities_in_entity_set"
      end
      # verify enum value
      allowable_values = ["Merge", "Replace", "PartialReplace"]
      if @api_client.config.client_side_validation && !allowable_values.include?(type)
        fail ArgumentError, "invalid value for \"type\", must be one of #{allowable_values}"
      end
      # verify the required parameter 'request_body' is set
      if @api_client.config.client_side_validation && request_body.nil?
        fail ArgumentError, "Missing the required parameter 'request_body' when calling DataApi.update_entities_in_entity_set"
      end
      # resource path
      local_var_path = '/datastore/data/set/{entitySetId}'.sub('{' + 'entitySetId' + '}', CGI.escape(entity_set_id.to_s))

      # query parameters
      query_params = opts[:query_params] || {}
      query_params[:'type'] = type

      # header parameters
      header_params = opts[:header_params] || {}
      # HTTP header 'Accept' (if needed)
      header_params['Accept'] = @api_client.select_header_accept(['application/json'])
      # HTTP header 'Content-Type'
      header_params['Content-Type'] = @api_client.select_header_content_type(['application/json'])

      # form parameters
      form_params = opts[:form_params] || {}

      # http body (model)
      post_body = opts[:body] || @api_client.object_to_http_body(request_body) 

      # return_type
      return_type = opts[:return_type] || 'Integer' 

      # auth_names
      auth_names = opts[:auth_names] || ['http_auth', 'openlattice_auth']

      new_options = opts.merge(
        :header_params => header_params,
        :query_params => query_params,
        :form_params => form_params,
        :body => post_body,
        :auth_names => auth_names,
        :return_type => return_type
      )

      data, status_code, headers = @api_client.call_api(:PUT, local_var_path, new_options)
      if @api_client.config.debugging
        @api_client.config.logger.debug "API called: DataApi#update_entities_in_entity_set\nData: #{data.inspect}\nStatus code: #{status_code}\nHeaders: #{headers}"
      end
      return data, status_code, headers
    end
  end
end
