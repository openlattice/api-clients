# coding: utf-8

"""
    OpenLattice API

    OpenLattice API  # noqa: E501

    The version of the OpenAPI document: 0.0.1
    Contact: support@openlattice.com
    Generated by: https://openapi-generator.tech
"""


import pprint
import re  # noqa: F401

import six

from openlattice.configuration import Configuration


class DataSetMetadata(object):
    """NOTE: This class is auto generated by OpenAPI Generator.
    Ref: https://openapi-generator.tech

    Do not edit the class manually.
    """

    """
    Attributes:
      openapi_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    openapi_types = {
        'id': 'str',
        'name': 'str',
        'organization_id': 'str',
        'external_id': 'str',
        'data_set_type': 'str',
        'metadata': 'DataMetadata'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'organization_id': 'organizationId',
        'external_id': 'externalId',
        'data_set_type': 'dataSetType',
        'metadata': 'metadata'
    }

    def __init__(self, id=None, name=None, organization_id=None, external_id=None, data_set_type=None, metadata=None, local_vars_configuration=None):  # noqa: E501
        """DataSetMetadata - a model defined in OpenAPI"""  # noqa: E501
        if local_vars_configuration is None:
            local_vars_configuration = Configuration()
        self.local_vars_configuration = local_vars_configuration

        self._id = None
        self._name = None
        self._organization_id = None
        self._external_id = None
        self._data_set_type = None
        self._metadata = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if organization_id is not None:
            self.organization_id = organization_id
        if external_id is not None:
            self.external_id = external_id
        if data_set_type is not None:
            self.data_set_type = data_set_type
        if metadata is not None:
            self.metadata = metadata

    @property
    def id(self):
        """Gets the id of this DataSetMetadata.  # noqa: E501


        :return: The id of this DataSetMetadata.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DataSetMetadata.


        :param id: The id of this DataSetMetadata.  # noqa: E501
        :type id: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this DataSetMetadata.  # noqa: E501


        :return: The name of this DataSetMetadata.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DataSetMetadata.


        :param name: The name of this DataSetMetadata.  # noqa: E501
        :type name: str
        """

        self._name = name

    @property
    def organization_id(self):
        """Gets the organization_id of this DataSetMetadata.  # noqa: E501


        :return: The organization_id of this DataSetMetadata.  # noqa: E501
        :rtype: str
        """
        return self._organization_id

    @organization_id.setter
    def organization_id(self, organization_id):
        """Sets the organization_id of this DataSetMetadata.


        :param organization_id: The organization_id of this DataSetMetadata.  # noqa: E501
        :type organization_id: str
        """

        self._organization_id = organization_id

    @property
    def external_id(self):
        """Gets the external_id of this DataSetMetadata.  # noqa: E501


        :return: The external_id of this DataSetMetadata.  # noqa: E501
        :rtype: str
        """
        return self._external_id

    @external_id.setter
    def external_id(self, external_id):
        """Sets the external_id of this DataSetMetadata.


        :param external_id: The external_id of this DataSetMetadata.  # noqa: E501
        :type external_id: str
        """

        self._external_id = external_id

    @property
    def data_set_type(self):
        """Gets the data_set_type of this DataSetMetadata.  # noqa: E501


        :return: The data_set_type of this DataSetMetadata.  # noqa: E501
        :rtype: str
        """
        return self._data_set_type

    @data_set_type.setter
    def data_set_type(self, data_set_type):
        """Sets the data_set_type of this DataSetMetadata.


        :param data_set_type: The data_set_type of this DataSetMetadata.  # noqa: E501
        :type data_set_type: str
        """
        allowed_values = ["EntitySet", "ExternalTable"]  # noqa: E501
        if self.local_vars_configuration.client_side_validation and data_set_type not in allowed_values:  # noqa: E501
            raise ValueError(
                "Invalid value for `data_set_type` ({0}), must be one of {1}"  # noqa: E501
                .format(data_set_type, allowed_values)
            )

        self._data_set_type = data_set_type

    @property
    def metadata(self):
        """Gets the metadata of this DataSetMetadata.  # noqa: E501


        :return: The metadata of this DataSetMetadata.  # noqa: E501
        :rtype: DataMetadata
        """
        return self._metadata

    @metadata.setter
    def metadata(self, metadata):
        """Sets the metadata of this DataSetMetadata.


        :param metadata: The metadata of this DataSetMetadata.  # noqa: E501
        :type metadata: DataMetadata
        """

        self._metadata = metadata

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.openapi_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DataSetMetadata):
            return False

        return self.to_dict() == other.to_dict()

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        if not isinstance(other, DataSetMetadata):
            return True

        return self.to_dict() != other.to_dict()
