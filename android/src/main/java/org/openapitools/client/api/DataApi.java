/**
 * OpenLattice API
 * OpenLattice API
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@openlattice.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.DataEdge;
import org.openapitools.client.model.DataEdgeKey;
import org.openapitools.client.model.DataGraph;
import org.openapitools.client.model.DataGraphIds;
import org.openapitools.client.model.EntityNeighborsFilter;
import org.openapitools.client.model.EntitySetSelection;
import org.openapitools.client.model.FilteredDataPageDefinition;
import org.openapitools.client.model.InlineObject;
import java.util.*;
import java.util.Map;
import java.util.UUID;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class DataApi {
  String basePath = "https://api.openlattice.com";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Creates a new set of associations.
  * 
   * @param inlineObject 
   * @return Map<String, List<UUID>>
  */
  public Map<String, List<UUID>> createAssociations (InlineObject inlineObject) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = inlineObject;
    // verify the required parameter 'inlineObject' is set
    if (inlineObject == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'inlineObject' when calling createAssociations",
        new ApiException(400, "Missing the required parameter 'inlineObject' when calling createAssociations"));
    }

    // create path and map variables
    String path = "/datastore/data/association";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Map<String, List<UUID>>) ApiInvoker.deserialize(localVarResponse, "map", List.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Creates a new set of associations.
   * 
   * @param inlineObject 
  */
  public void createAssociations (InlineObject inlineObject, final Response.Listener<Map<String, List<UUID>>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = inlineObject;

    // verify the required parameter 'inlineObject' is set
    if (inlineObject == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'inlineObject' when calling createAssociations",
        new ApiException(400, "Missing the required parameter 'inlineObject' when calling createAssociations"));
    }

    // create path and map variables
    String path = "/datastore/data/association".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Map<String, List<UUID>>) ApiInvoker.deserialize(localVarResponse,  "map", List.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Creates a new set of associations.
  * 
   * @param dataEdgeKey 
   * @return Integer
  */
  public Integer createEdges (List<DataEdgeKey> dataEdgeKey) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = dataEdgeKey;
    // verify the required parameter 'dataEdgeKey' is set
    if (dataEdgeKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'dataEdgeKey' when calling createEdges",
        new ApiException(400, "Missing the required parameter 'dataEdgeKey' when calling createEdges"));
    }

    // create path and map variables
    String path = "/datastore/data/association";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Integer) ApiInvoker.deserialize(localVarResponse, "", Integer.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Creates a new set of associations.
   * 
   * @param dataEdgeKey 
  */
  public void createEdges (List<DataEdgeKey> dataEdgeKey, final Response.Listener<Integer> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = dataEdgeKey;

    // verify the required parameter 'dataEdgeKey' is set
    if (dataEdgeKey == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'dataEdgeKey' when calling createEdges",
        new ApiException(400, "Missing the required parameter 'dataEdgeKey' when calling createEdges"));
    }

    // create path and map variables
    String path = "/datastore/data/association".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Integer) ApiInvoker.deserialize(localVarResponse,  "", Integer.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Creates a new set of entities.
  * 
   * @param setId 
   * @param requestBody 
   * @return List<UUID>
  */
  public List<UUID> createEntities (UUID setId, List<Map<String, List<String>>> requestBody) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = requestBody;
    // verify the required parameter 'setId' is set
    if (setId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'setId' when calling createEntities",
        new ApiException(400, "Missing the required parameter 'setId' when calling createEntities"));
    }
    // verify the required parameter 'requestBody' is set
    if (requestBody == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'requestBody' when calling createEntities",
        new ApiException(400, "Missing the required parameter 'requestBody' when calling createEntities"));
    }

    // create path and map variables
    String path = "/datastore/data/set/";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "setId", setId));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<UUID>) ApiInvoker.deserialize(localVarResponse, "array", UUID.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Creates a new set of entities.
   * 
   * @param setId    * @param requestBody 
  */
  public void createEntities (UUID setId, List<Map<String, List<String>>> requestBody, final Response.Listener<List<UUID>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = requestBody;

    // verify the required parameter 'setId' is set
    if (setId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'setId' when calling createEntities",
        new ApiException(400, "Missing the required parameter 'setId' when calling createEntities"));
    }
    // verify the required parameter 'requestBody' is set
    if (requestBody == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'requestBody' when calling createEntities",
        new ApiException(400, "Missing the required parameter 'requestBody' when calling createEntities"));
    }

    // create path and map variables
    String path = "/datastore/data/set/".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "setId", setId));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<UUID>) ApiInvoker.deserialize(localVarResponse,  "array", UUID.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Creates entities and assocations
  * 
   * @param dataGraph 
   * @return DataGraphIds
  */
  public DataGraphIds createEntityAndAssociationData (DataGraph dataGraph) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = dataGraph;
    // verify the required parameter 'dataGraph' is set
    if (dataGraph == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'dataGraph' when calling createEntityAndAssociationData",
        new ApiException(400, "Missing the required parameter 'dataGraph' when calling createEntityAndAssociationData"));
    }

    // create path and map variables
    String path = "/datastore/data";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (DataGraphIds) ApiInvoker.deserialize(localVarResponse, "", DataGraphIds.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Creates entities and assocations
   * 
   * @param dataGraph 
  */
  public void createEntityAndAssociationData (DataGraph dataGraph, final Response.Listener<DataGraphIds> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = dataGraph;

    // verify the required parameter 'dataGraph' is set
    if (dataGraph == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'dataGraph' when calling createEntityAndAssociationData",
        new ApiException(400, "Missing the required parameter 'dataGraph' when calling createEntityAndAssociationData"));
    }

    // create path and map variables
    String path = "/datastore/data".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((DataGraphIds) ApiInvoker.deserialize(localVarResponse,  "", DataGraphIds.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Clears the Entity matching the given Entity id and all of its neighbor Entities
  * 
   * @param entitySetId 
   * @param type 
   * @return void
  */
  public void deleteAllEntitiesFromEntitySet (UUID entitySetId, String type) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'entitySetId' is set
    if (entitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetId' when calling deleteAllEntitiesFromEntitySet",
        new ApiException(400, "Missing the required parameter 'entitySetId' when calling deleteAllEntitiesFromEntitySet"));
    }
    // verify the required parameter 'type' is set
    if (type == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'type' when calling deleteAllEntitiesFromEntitySet",
        new ApiException(400, "Missing the required parameter 'type' when calling deleteAllEntitiesFromEntitySet"));
    }

    // create path and map variables
    String path = "/datastore/data/set/{entitySetId}/all".replaceAll("\\{" + "entitySetId" + "\\}", apiInvoker.escapeString(entitySetId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "type", type));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Clears the Entity matching the given Entity id and all of its neighbor Entities
   * 
   * @param entitySetId    * @param type 
  */
  public void deleteAllEntitiesFromEntitySet (UUID entitySetId, String type, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'entitySetId' is set
    if (entitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetId' when calling deleteAllEntitiesFromEntitySet",
        new ApiException(400, "Missing the required parameter 'entitySetId' when calling deleteAllEntitiesFromEntitySet"));
    }
    // verify the required parameter 'type' is set
    if (type == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'type' when calling deleteAllEntitiesFromEntitySet",
        new ApiException(400, "Missing the required parameter 'type' when calling deleteAllEntitiesFromEntitySet"));
    }

    // create path and map variables
    String path = "/datastore/data/set/{entitySetId}/all".replaceAll("\\{format\\}","json").replaceAll("\\{" + "entitySetId" + "\\}", apiInvoker.escapeString(entitySetId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "type", type));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Deletes multiple entities from an entity set.
  * 
   * @param entitySetId 
   * @param type 
   * @param UUID 
   * @param block 
   * @return Integer
  */
  public Integer deleteEntities (UUID entitySetId, String type, List<UUID> UUID, Boolean block) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = UUID;
    // verify the required parameter 'entitySetId' is set
    if (entitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetId' when calling deleteEntities",
        new ApiException(400, "Missing the required parameter 'entitySetId' when calling deleteEntities"));
    }
    // verify the required parameter 'type' is set
    if (type == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'type' when calling deleteEntities",
        new ApiException(400, "Missing the required parameter 'type' when calling deleteEntities"));
    }
    // verify the required parameter 'UUID' is set
    if (UUID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'UUID' when calling deleteEntities",
        new ApiException(400, "Missing the required parameter 'UUID' when calling deleteEntities"));
    }

    // create path and map variables
    String path = "/datastore/data/set/{entitySetId}".replaceAll("\\{" + "entitySetId" + "\\}", apiInvoker.escapeString(entitySetId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "type", type));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "block", block));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Integer) ApiInvoker.deserialize(localVarResponse, "", Integer.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Deletes multiple entities from an entity set.
   * 
   * @param entitySetId    * @param type    * @param UUID    * @param block 
  */
  public void deleteEntities (UUID entitySetId, String type, List<UUID> UUID, Boolean block, final Response.Listener<Integer> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = UUID;

    // verify the required parameter 'entitySetId' is set
    if (entitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetId' when calling deleteEntities",
        new ApiException(400, "Missing the required parameter 'entitySetId' when calling deleteEntities"));
    }
    // verify the required parameter 'type' is set
    if (type == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'type' when calling deleteEntities",
        new ApiException(400, "Missing the required parameter 'type' when calling deleteEntities"));
    }
    // verify the required parameter 'UUID' is set
    if (UUID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'UUID' when calling deleteEntities",
        new ApiException(400, "Missing the required parameter 'UUID' when calling deleteEntities"));
    }

    // create path and map variables
    String path = "/datastore/data/set/{entitySetId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "entitySetId" + "\\}", apiInvoker.escapeString(entitySetId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "type", type));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "block", block));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Integer) ApiInvoker.deserialize(localVarResponse,  "", Integer.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Deletes the entities matching the given entity ids and all of its neighbor entities provided in the filter.
  * 
   * @param entitySetId 
   * @param type 
   * @param entityNeighborsFilter 
   * @return Integer
  */
  public Integer deleteEntitiesAndNeighbors (UUID entitySetId, String type, List<EntityNeighborsFilter> entityNeighborsFilter) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = entityNeighborsFilter;
    // verify the required parameter 'entitySetId' is set
    if (entitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetId' when calling deleteEntitiesAndNeighbors",
        new ApiException(400, "Missing the required parameter 'entitySetId' when calling deleteEntitiesAndNeighbors"));
    }
    // verify the required parameter 'type' is set
    if (type == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'type' when calling deleteEntitiesAndNeighbors",
        new ApiException(400, "Missing the required parameter 'type' when calling deleteEntitiesAndNeighbors"));
    }
    // verify the required parameter 'entityNeighborsFilter' is set
    if (entityNeighborsFilter == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entityNeighborsFilter' when calling deleteEntitiesAndNeighbors",
        new ApiException(400, "Missing the required parameter 'entityNeighborsFilter' when calling deleteEntitiesAndNeighbors"));
    }

    // create path and map variables
    String path = "/datastore/data/set/{entitySetId}/neighbors".replaceAll("\\{" + "entitySetId" + "\\}", apiInvoker.escapeString(entitySetId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "type", type));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Integer) ApiInvoker.deserialize(localVarResponse, "", Integer.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Deletes the entities matching the given entity ids and all of its neighbor entities provided in the filter.
   * 
   * @param entitySetId    * @param type    * @param entityNeighborsFilter 
  */
  public void deleteEntitiesAndNeighbors (UUID entitySetId, String type, List<EntityNeighborsFilter> entityNeighborsFilter, final Response.Listener<Integer> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = entityNeighborsFilter;

    // verify the required parameter 'entitySetId' is set
    if (entitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetId' when calling deleteEntitiesAndNeighbors",
        new ApiException(400, "Missing the required parameter 'entitySetId' when calling deleteEntitiesAndNeighbors"));
    }
    // verify the required parameter 'type' is set
    if (type == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'type' when calling deleteEntitiesAndNeighbors",
        new ApiException(400, "Missing the required parameter 'type' when calling deleteEntitiesAndNeighbors"));
    }
    // verify the required parameter 'entityNeighborsFilter' is set
    if (entityNeighborsFilter == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entityNeighborsFilter' when calling deleteEntitiesAndNeighbors",
        new ApiException(400, "Missing the required parameter 'entityNeighborsFilter' when calling deleteEntitiesAndNeighbors"));
    }

    // create path and map variables
    String path = "/datastore/data/set/{entitySetId}/neighbors".replaceAll("\\{format\\}","json").replaceAll("\\{" + "entitySetId" + "\\}", apiInvoker.escapeString(entitySetId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "type", type));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Integer) ApiInvoker.deserialize(localVarResponse,  "", Integer.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Deletes a single entity from an entity set.
  * 
   * @param entitySetId 
   * @param entityKeyId 
   * @param type 
   * @param block 
   * @return void
  */
  public void deleteEntity (UUID entitySetId, UUID entityKeyId, String type, Boolean block) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'entitySetId' is set
    if (entitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetId' when calling deleteEntity",
        new ApiException(400, "Missing the required parameter 'entitySetId' when calling deleteEntity"));
    }
    // verify the required parameter 'entityKeyId' is set
    if (entityKeyId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entityKeyId' when calling deleteEntity",
        new ApiException(400, "Missing the required parameter 'entityKeyId' when calling deleteEntity"));
    }
    // verify the required parameter 'type' is set
    if (type == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'type' when calling deleteEntity",
        new ApiException(400, "Missing the required parameter 'type' when calling deleteEntity"));
    }

    // create path and map variables
    String path = "/datastore/data/set/{entitySetId}/{entityKeyId}".replaceAll("\\{" + "entitySetId" + "\\}", apiInvoker.escapeString(entitySetId.toString())).replaceAll("\\{" + "entityKeyId" + "\\}", apiInvoker.escapeString(entityKeyId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "type", type));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "block", block));
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Deletes a single entity from an entity set.
   * 
   * @param entitySetId    * @param entityKeyId    * @param type    * @param block 
  */
  public void deleteEntity (UUID entitySetId, UUID entityKeyId, String type, Boolean block, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'entitySetId' is set
    if (entitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetId' when calling deleteEntity",
        new ApiException(400, "Missing the required parameter 'entitySetId' when calling deleteEntity"));
    }
    // verify the required parameter 'entityKeyId' is set
    if (entityKeyId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entityKeyId' when calling deleteEntity",
        new ApiException(400, "Missing the required parameter 'entityKeyId' when calling deleteEntity"));
    }
    // verify the required parameter 'type' is set
    if (type == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'type' when calling deleteEntity",
        new ApiException(400, "Missing the required parameter 'type' when calling deleteEntity"));
    }

    // create path and map variables
    String path = "/datastore/data/set/{entitySetId}/{entityKeyId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "entitySetId" + "\\}", apiInvoker.escapeString(entitySetId.toString())).replaceAll("\\{" + "entityKeyId" + "\\}", apiInvoker.escapeString(entityKeyId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "type", type));
    queryParams.addAll(ApiInvoker.parameterToPairs("", "block", block));


    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Deletes properties from an entity.
  * 
   * @param entitySetId 
   * @param entityKeyId 
   * @param type 
   * @param UUID 
   * @return void
  */
  public void deleteEntityProperties (UUID entitySetId, UUID entityKeyId, String type, List<UUID> UUID) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = UUID;
    // verify the required parameter 'entitySetId' is set
    if (entitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetId' when calling deleteEntityProperties",
        new ApiException(400, "Missing the required parameter 'entitySetId' when calling deleteEntityProperties"));
    }
    // verify the required parameter 'entityKeyId' is set
    if (entityKeyId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entityKeyId' when calling deleteEntityProperties",
        new ApiException(400, "Missing the required parameter 'entityKeyId' when calling deleteEntityProperties"));
    }
    // verify the required parameter 'type' is set
    if (type == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'type' when calling deleteEntityProperties",
        new ApiException(400, "Missing the required parameter 'type' when calling deleteEntityProperties"));
    }
    // verify the required parameter 'UUID' is set
    if (UUID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'UUID' when calling deleteEntityProperties",
        new ApiException(400, "Missing the required parameter 'UUID' when calling deleteEntityProperties"));
    }

    // create path and map variables
    String path = "/datastore/data/{entitySetId}/{entityKeyId}/properties".replaceAll("\\{" + "entitySetId" + "\\}", apiInvoker.escapeString(entitySetId.toString())).replaceAll("\\{" + "entityKeyId" + "\\}", apiInvoker.escapeString(entityKeyId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "type", type));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Deletes properties from an entity.
   * 
   * @param entitySetId    * @param entityKeyId    * @param type    * @param UUID 
  */
  public void deleteEntityProperties (UUID entitySetId, UUID entityKeyId, String type, List<UUID> UUID, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = UUID;

    // verify the required parameter 'entitySetId' is set
    if (entitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetId' when calling deleteEntityProperties",
        new ApiException(400, "Missing the required parameter 'entitySetId' when calling deleteEntityProperties"));
    }
    // verify the required parameter 'entityKeyId' is set
    if (entityKeyId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entityKeyId' when calling deleteEntityProperties",
        new ApiException(400, "Missing the required parameter 'entityKeyId' when calling deleteEntityProperties"));
    }
    // verify the required parameter 'type' is set
    if (type == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'type' when calling deleteEntityProperties",
        new ApiException(400, "Missing the required parameter 'type' when calling deleteEntityProperties"));
    }
    // verify the required parameter 'UUID' is set
    if (UUID == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'UUID' when calling deleteEntityProperties",
        new ApiException(400, "Missing the required parameter 'UUID' when calling deleteEntityProperties"));
    }

    // create path and map variables
    String path = "/datastore/data/{entitySetId}/{entityKeyId}/properties".replaceAll("\\{format\\}","json").replaceAll("\\{" + "entitySetId" + "\\}", apiInvoker.escapeString(entitySetId.toString())).replaceAll("\\{" + "entityKeyId" + "\\}", apiInvoker.escapeString(entityKeyId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "type", type));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "DELETE", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Loads a single entity by its entityKeyId and entitySetId
  * 
   * @param entitySetId 
   * @param entityKeyId 
   * @return Map<String, List<String>>
  */
  public Map<String, List<String>> getEntity (UUID entitySetId, UUID entityKeyId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'entitySetId' is set
    if (entitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetId' when calling getEntity",
        new ApiException(400, "Missing the required parameter 'entitySetId' when calling getEntity"));
    }
    // verify the required parameter 'entityKeyId' is set
    if (entityKeyId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entityKeyId' when calling getEntity",
        new ApiException(400, "Missing the required parameter 'entityKeyId' when calling getEntity"));
    }

    // create path and map variables
    String path = "/datastore/data/{entitySetId}/{entityKeyId}".replaceAll("\\{" + "entitySetId" + "\\}", apiInvoker.escapeString(entitySetId.toString())).replaceAll("\\{" + "entityKeyId" + "\\}", apiInvoker.escapeString(entityKeyId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Map<String, List<String>>) ApiInvoker.deserialize(localVarResponse, "map", List.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Loads a single entity by its entityKeyId and entitySetId
   * 
   * @param entitySetId    * @param entityKeyId 
  */
  public void getEntity (UUID entitySetId, UUID entityKeyId, final Response.Listener<Map<String, List<String>>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'entitySetId' is set
    if (entitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetId' when calling getEntity",
        new ApiException(400, "Missing the required parameter 'entitySetId' when calling getEntity"));
    }
    // verify the required parameter 'entityKeyId' is set
    if (entityKeyId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entityKeyId' when calling getEntity",
        new ApiException(400, "Missing the required parameter 'entityKeyId' when calling getEntity"));
    }

    // create path and map variables
    String path = "/datastore/data/{entitySetId}/{entityKeyId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "entitySetId" + "\\}", apiInvoker.escapeString(entitySetId.toString())).replaceAll("\\{" + "entityKeyId" + "\\}", apiInvoker.escapeString(entityKeyId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Map<String, List<String>>) ApiInvoker.deserialize(localVarResponse,  "map", List.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Loads property  values for a single entity by its entityKeyId, entitySetId and propertyTypeId
  * 
   * @param entitySetId 
   * @param entityKeyId 
   * @param propertyTypeId 
   * @return List<String>
  */
  public List<String> getEntityPropertyValues (UUID entitySetId, UUID entityKeyId, UUID propertyTypeId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'entitySetId' is set
    if (entitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetId' when calling getEntityPropertyValues",
        new ApiException(400, "Missing the required parameter 'entitySetId' when calling getEntityPropertyValues"));
    }
    // verify the required parameter 'entityKeyId' is set
    if (entityKeyId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entityKeyId' when calling getEntityPropertyValues",
        new ApiException(400, "Missing the required parameter 'entityKeyId' when calling getEntityPropertyValues"));
    }
    // verify the required parameter 'propertyTypeId' is set
    if (propertyTypeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'propertyTypeId' when calling getEntityPropertyValues",
        new ApiException(400, "Missing the required parameter 'propertyTypeId' when calling getEntityPropertyValues"));
    }

    // create path and map variables
    String path = "/datastore/data/{entitySetId}/{entityKeyId}/{propertyTypeId}".replaceAll("\\{" + "entitySetId" + "\\}", apiInvoker.escapeString(entitySetId.toString())).replaceAll("\\{" + "entityKeyId" + "\\}", apiInvoker.escapeString(entityKeyId.toString())).replaceAll("\\{" + "propertyTypeId" + "\\}", apiInvoker.escapeString(propertyTypeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<String>) ApiInvoker.deserialize(localVarResponse, "array", String.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Loads property  values for a single entity by its entityKeyId, entitySetId and propertyTypeId
   * 
   * @param entitySetId    * @param entityKeyId    * @param propertyTypeId 
  */
  public void getEntityPropertyValues (UUID entitySetId, UUID entityKeyId, UUID propertyTypeId, final Response.Listener<List<String>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'entitySetId' is set
    if (entitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetId' when calling getEntityPropertyValues",
        new ApiException(400, "Missing the required parameter 'entitySetId' when calling getEntityPropertyValues"));
    }
    // verify the required parameter 'entityKeyId' is set
    if (entityKeyId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entityKeyId' when calling getEntityPropertyValues",
        new ApiException(400, "Missing the required parameter 'entityKeyId' when calling getEntityPropertyValues"));
    }
    // verify the required parameter 'propertyTypeId' is set
    if (propertyTypeId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'propertyTypeId' when calling getEntityPropertyValues",
        new ApiException(400, "Missing the required parameter 'propertyTypeId' when calling getEntityPropertyValues"));
    }

    // create path and map variables
    String path = "/datastore/data/{entitySetId}/{entityKeyId}/{propertyTypeId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "entitySetId" + "\\}", apiInvoker.escapeString(entitySetId.toString())).replaceAll("\\{" + "entityKeyId" + "\\}", apiInvoker.escapeString(entityKeyId.toString())).replaceAll("\\{" + "propertyTypeId" + "\\}", apiInvoker.escapeString(propertyTypeId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<String>) ApiInvoker.deserialize(localVarResponse,  "array", String.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Gets the number of entities in an entity set.
  * 
   * @param entitySetId 
   * @return Integer
  */
  public Integer getEntitySetSize (UUID entitySetId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'entitySetId' is set
    if (entitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetId' when calling getEntitySetSize",
        new ApiException(400, "Missing the required parameter 'entitySetId' when calling getEntitySetSize"));
    }

    // create path and map variables
    String path = "/datastore/data/{entitySetId}/count".replaceAll("\\{" + "entitySetId" + "\\}", apiInvoker.escapeString(entitySetId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Integer) ApiInvoker.deserialize(localVarResponse, "", Integer.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Gets the number of entities in an entity set.
   * 
   * @param entitySetId 
  */
  public void getEntitySetSize (UUID entitySetId, final Response.Listener<Integer> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'entitySetId' is set
    if (entitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetId' when calling getEntitySetSize",
        new ApiException(400, "Missing the required parameter 'entitySetId' when calling getEntitySetSize"));
    }

    // create path and map variables
    String path = "/datastore/data/{entitySetId}/count".replaceAll("\\{format\\}","json").replaceAll("\\{" + "entitySetId" + "\\}", apiInvoker.escapeString(entitySetId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Integer) ApiInvoker.deserialize(localVarResponse,  "", Integer.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Gets an iterable containing the entity data, using property type FQNs as key
  * 
   * @param entitySetId 
   * @return List<Map<String, List<String>>>
  */
  public List<Map<String, List<String>>> loadEntitySetData (UUID entitySetId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'entitySetId' is set
    if (entitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetId' when calling loadEntitySetData",
        new ApiException(400, "Missing the required parameter 'entitySetId' when calling loadEntitySetData"));
    }

    // create path and map variables
    String path = "/datastore/data/set/{entitySetId}".replaceAll("\\{" + "entitySetId" + "\\}", apiInvoker.escapeString(entitySetId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<Map<String, List<String>>>) ApiInvoker.deserialize(localVarResponse, "array", Map.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Gets an iterable containing the entity data, using property type FQNs as key
   * 
   * @param entitySetId 
  */
  public void loadEntitySetData (UUID entitySetId, final Response.Listener<List<Map<String, List<String>>>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'entitySetId' is set
    if (entitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetId' when calling loadEntitySetData",
        new ApiException(400, "Missing the required parameter 'entitySetId' when calling loadEntitySetData"));
    }

    // create path and map variables
    String path = "/datastore/data/set/{entitySetId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "entitySetId" + "\\}", apiInvoker.escapeString(entitySetId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<Map<String, List<String>>>) ApiInvoker.deserialize(localVarResponse,  "array", Map.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Loads data in multiple pages
  * 
   * @param entitySetId 
   * @param filteredDataPageDefinition 
   * @return List<Map<String, List<String>>>
  */
  public List<Map<String, List<String>>> loadFilteredEntitySetData (UUID entitySetId, List<FilteredDataPageDefinition> filteredDataPageDefinition) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = filteredDataPageDefinition;
    // verify the required parameter 'entitySetId' is set
    if (entitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetId' when calling loadFilteredEntitySetData",
        new ApiException(400, "Missing the required parameter 'entitySetId' when calling loadFilteredEntitySetData"));
    }
    // verify the required parameter 'filteredDataPageDefinition' is set
    if (filteredDataPageDefinition == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'filteredDataPageDefinition' when calling loadFilteredEntitySetData",
        new ApiException(400, "Missing the required parameter 'filteredDataPageDefinition' when calling loadFilteredEntitySetData"));
    }

    // create path and map variables
    String path = "/datastore/data/set/{entitySetId}/filtered".replaceAll("\\{" + "entitySetId" + "\\}", apiInvoker.escapeString(entitySetId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<Map<String, List<String>>>) ApiInvoker.deserialize(localVarResponse, "array", Map.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Loads data in multiple pages
   * 
   * @param entitySetId    * @param filteredDataPageDefinition 
  */
  public void loadFilteredEntitySetData (UUID entitySetId, List<FilteredDataPageDefinition> filteredDataPageDefinition, final Response.Listener<List<Map<String, List<String>>>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = filteredDataPageDefinition;

    // verify the required parameter 'entitySetId' is set
    if (entitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetId' when calling loadFilteredEntitySetData",
        new ApiException(400, "Missing the required parameter 'entitySetId' when calling loadFilteredEntitySetData"));
    }
    // verify the required parameter 'filteredDataPageDefinition' is set
    if (filteredDataPageDefinition == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'filteredDataPageDefinition' when calling loadFilteredEntitySetData",
        new ApiException(400, "Missing the required parameter 'filteredDataPageDefinition' when calling loadFilteredEntitySetData"));
    }

    // create path and map variables
    String path = "/datastore/data/set/{entitySetId}/filtered".replaceAll("\\{format\\}","json").replaceAll("\\{" + "entitySetId" + "\\}", apiInvoker.escapeString(entitySetId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<Map<String, List<String>>>) ApiInvoker.deserialize(localVarResponse,  "array", Map.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Loads a linked entity set breakdown with the selected linked entities and properties.
  * 
   * @param linkedEntitySetId 
   * @param entitySetSelection 
   * @return Map<String, Map<String, Map<String, Map<String, List<String>>>>>
  */
  public Map<String, Map<String, Map<String, Map<String, List<String>>>>> loadLinkedEntitySetBreakdown (UUID linkedEntitySetId, List<EntitySetSelection> entitySetSelection) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = entitySetSelection;
    // verify the required parameter 'linkedEntitySetId' is set
    if (linkedEntitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'linkedEntitySetId' when calling loadLinkedEntitySetBreakdown",
        new ApiException(400, "Missing the required parameter 'linkedEntitySetId' when calling loadLinkedEntitySetBreakdown"));
    }
    // verify the required parameter 'entitySetSelection' is set
    if (entitySetSelection == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetSelection' when calling loadLinkedEntitySetBreakdown",
        new ApiException(400, "Missing the required parameter 'entitySetSelection' when calling loadLinkedEntitySetBreakdown"));
    }

    // create path and map variables
    String path = "/datastore/data/set/{linkedEntitySetId}/detailed".replaceAll("\\{" + "linkedEntitySetId" + "\\}", apiInvoker.escapeString(linkedEntitySetId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Map<String, Map<String, Map<String, Map<String, List<String>>>>>) ApiInvoker.deserialize(localVarResponse, "map", Map.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Loads a linked entity set breakdown with the selected linked entities and properties.
   * 
   * @param linkedEntitySetId    * @param entitySetSelection 
  */
  public void loadLinkedEntitySetBreakdown (UUID linkedEntitySetId, List<EntitySetSelection> entitySetSelection, final Response.Listener<Map<String, Map<String, Map<String, Map<String, List<String>>>>>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = entitySetSelection;

    // verify the required parameter 'linkedEntitySetId' is set
    if (linkedEntitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'linkedEntitySetId' when calling loadLinkedEntitySetBreakdown",
        new ApiException(400, "Missing the required parameter 'linkedEntitySetId' when calling loadLinkedEntitySetBreakdown"));
    }
    // verify the required parameter 'entitySetSelection' is set
    if (entitySetSelection == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetSelection' when calling loadLinkedEntitySetBreakdown",
        new ApiException(400, "Missing the required parameter 'entitySetSelection' when calling loadLinkedEntitySetBreakdown"));
    }

    // create path and map variables
    String path = "/datastore/data/set/{linkedEntitySetId}/detailed".replaceAll("\\{format\\}","json").replaceAll("\\{" + "linkedEntitySetId" + "\\}", apiInvoker.escapeString(linkedEntitySetId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Map<String, Map<String, Map<String, Map<String, List<String>>>>>) ApiInvoker.deserialize(localVarResponse,  "map", Map.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Gets a list of entities by UUIDs
  * 
   * @param entitySetId 
   * @param entitySetSelection 
   * @return List<Map<String, List<String>>>
  */
  public List<Map<String, List<String>>> loadSelectedEntitySetData (UUID entitySetId, List<EntitySetSelection> entitySetSelection) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = entitySetSelection;
    // verify the required parameter 'entitySetId' is set
    if (entitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetId' when calling loadSelectedEntitySetData",
        new ApiException(400, "Missing the required parameter 'entitySetId' when calling loadSelectedEntitySetData"));
    }
    // verify the required parameter 'entitySetSelection' is set
    if (entitySetSelection == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetSelection' when calling loadSelectedEntitySetData",
        new ApiException(400, "Missing the required parameter 'entitySetSelection' when calling loadSelectedEntitySetData"));
    }

    // create path and map variables
    String path = "/datastore/data/set/{entitySetId}".replaceAll("\\{" + "entitySetId" + "\\}", apiInvoker.escapeString(entitySetId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (List<Map<String, List<String>>>) ApiInvoker.deserialize(localVarResponse, "array", Map.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Gets a list of entities by UUIDs
   * 
   * @param entitySetId    * @param entitySetSelection 
  */
  public void loadSelectedEntitySetData (UUID entitySetId, List<EntitySetSelection> entitySetSelection, final Response.Listener<List<Map<String, List<String>>>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = entitySetSelection;

    // verify the required parameter 'entitySetId' is set
    if (entitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetId' when calling loadSelectedEntitySetData",
        new ApiException(400, "Missing the required parameter 'entitySetId' when calling loadSelectedEntitySetData"));
    }
    // verify the required parameter 'entitySetSelection' is set
    if (entitySetSelection == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetSelection' when calling loadSelectedEntitySetData",
        new ApiException(400, "Missing the required parameter 'entitySetSelection' when calling loadSelectedEntitySetData"));
    }

    // create path and map variables
    String path = "/datastore/data/set/{entitySetId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "entitySetId" + "\\}", apiInvoker.escapeString(entitySetId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((List<Map<String, List<String>>>) ApiInvoker.deserialize(localVarResponse,  "array", Map.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Replaces Association Data
  * 
   * @param partial 
   * @param requestBody 
   * @return Integer
  */
  public Integer replaceAssociationData (Boolean partial, Map<String, Map<String, DataEdge>> requestBody) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = requestBody;
    // verify the required parameter 'partial' is set
    if (partial == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'partial' when calling replaceAssociationData",
        new ApiException(400, "Missing the required parameter 'partial' when calling replaceAssociationData"));
    }
    // verify the required parameter 'requestBody' is set
    if (requestBody == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'requestBody' when calling replaceAssociationData",
        new ApiException(400, "Missing the required parameter 'requestBody' when calling replaceAssociationData"));
    }

    // create path and map variables
    String path = "/datastore/data/association";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "partial", partial));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Integer) ApiInvoker.deserialize(localVarResponse, "", Integer.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Replaces Association Data
   * 
   * @param partial    * @param requestBody 
  */
  public void replaceAssociationData (Boolean partial, Map<String, Map<String, DataEdge>> requestBody, final Response.Listener<Integer> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = requestBody;

    // verify the required parameter 'partial' is set
    if (partial == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'partial' when calling replaceAssociationData",
        new ApiException(400, "Missing the required parameter 'partial' when calling replaceAssociationData"));
    }
    // verify the required parameter 'requestBody' is set
    if (requestBody == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'requestBody' when calling replaceAssociationData",
        new ApiException(400, "Missing the required parameter 'requestBody' when calling replaceAssociationData"));
    }

    // create path and map variables
    String path = "/datastore/data/association".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "partial", partial));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Integer) ApiInvoker.deserialize(localVarResponse,  "", Integer.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Replaces Entity Properties
  * 
   * @param entitySetId 
   * @param requestBody 
   * @return Integer
  */
  public Integer replaceEntityProperties (UUID entitySetId, Map<String, Map<String, List<Map<String, String>>>> requestBody) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = requestBody;
    // verify the required parameter 'entitySetId' is set
    if (entitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetId' when calling replaceEntityProperties",
        new ApiException(400, "Missing the required parameter 'entitySetId' when calling replaceEntityProperties"));
    }
    // verify the required parameter 'requestBody' is set
    if (requestBody == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'requestBody' when calling replaceEntityProperties",
        new ApiException(400, "Missing the required parameter 'requestBody' when calling replaceEntityProperties"));
    }

    // create path and map variables
    String path = "/datastore/data/set/{entitySetId}".replaceAll("\\{" + "entitySetId" + "\\}", apiInvoker.escapeString(entitySetId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Integer) ApiInvoker.deserialize(localVarResponse, "", Integer.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Replaces Entity Properties
   * 
   * @param entitySetId    * @param requestBody 
  */
  public void replaceEntityProperties (UUID entitySetId, Map<String, Map<String, List<Map<String, String>>>> requestBody, final Response.Listener<Integer> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = requestBody;

    // verify the required parameter 'entitySetId' is set
    if (entitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetId' when calling replaceEntityProperties",
        new ApiException(400, "Missing the required parameter 'entitySetId' when calling replaceEntityProperties"));
    }
    // verify the required parameter 'requestBody' is set
    if (requestBody == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'requestBody' when calling replaceEntityProperties",
        new ApiException(400, "Missing the required parameter 'requestBody' when calling replaceEntityProperties"));
    }

    // create path and map variables
    String path = "/datastore/data/set/{entitySetId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "entitySetId" + "\\}", apiInvoker.escapeString(entitySetId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Integer) ApiInvoker.deserialize(localVarResponse,  "", Integer.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Perform one of the following bulk update operations on entities (type &#x3D; Merge) adds new properties without affecting existing data, (type &#x3D; PartialReplace) replaces all values for supplied property types, but does not not affect other property types for an entity, (type &#x3D; Replace) replaces all entity data with the supplied properties.
  * 
   * @param entitySetId 
   * @param type 
   * @param requestBody 
   * @return Integer
  */
  public Integer updateEntitiesInEntitySet (UUID entitySetId, String type, Map<String, Map<String, List<String>>> requestBody) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = requestBody;
    // verify the required parameter 'entitySetId' is set
    if (entitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetId' when calling updateEntitiesInEntitySet",
        new ApiException(400, "Missing the required parameter 'entitySetId' when calling updateEntitiesInEntitySet"));
    }
    // verify the required parameter 'type' is set
    if (type == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'type' when calling updateEntitiesInEntitySet",
        new ApiException(400, "Missing the required parameter 'type' when calling updateEntitiesInEntitySet"));
    }
    // verify the required parameter 'requestBody' is set
    if (requestBody == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'requestBody' when calling updateEntitiesInEntitySet",
        new ApiException(400, "Missing the required parameter 'requestBody' when calling updateEntitiesInEntitySet"));
    }

    // create path and map variables
    String path = "/datastore/data/set/{entitySetId}".replaceAll("\\{" + "entitySetId" + "\\}", apiInvoker.escapeString(entitySetId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    queryParams.addAll(ApiInvoker.parameterToPairs("", "type", type));
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Integer) ApiInvoker.deserialize(localVarResponse, "", Integer.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Perform one of the following bulk update operations on entities (type &#x3D; Merge) adds new properties without affecting existing data, (type &#x3D; PartialReplace) replaces all values for supplied property types, but does not not affect other property types for an entity, (type &#x3D; Replace) replaces all entity data with the supplied properties.
   * 
   * @param entitySetId    * @param type    * @param requestBody 
  */
  public void updateEntitiesInEntitySet (UUID entitySetId, String type, Map<String, Map<String, List<String>>> requestBody, final Response.Listener<Integer> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = requestBody;

    // verify the required parameter 'entitySetId' is set
    if (entitySetId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'entitySetId' when calling updateEntitiesInEntitySet",
        new ApiException(400, "Missing the required parameter 'entitySetId' when calling updateEntitiesInEntitySet"));
    }
    // verify the required parameter 'type' is set
    if (type == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'type' when calling updateEntitiesInEntitySet",
        new ApiException(400, "Missing the required parameter 'type' when calling updateEntitiesInEntitySet"));
    }
    // verify the required parameter 'requestBody' is set
    if (requestBody == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'requestBody' when calling updateEntitiesInEntitySet",
        new ApiException(400, "Missing the required parameter 'requestBody' when calling updateEntitiesInEntitySet"));
    }

    // create path and map variables
    String path = "/datastore/data/set/{entitySetId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "entitySetId" + "\\}", apiInvoker.escapeString(entitySetId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();

    queryParams.addAll(ApiInvoker.parameterToPairs("", "type", type));


    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PUT", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Integer) ApiInvoker.deserialize(localVarResponse,  "", Integer.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
