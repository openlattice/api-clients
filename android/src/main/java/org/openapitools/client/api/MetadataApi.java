/**
 * OpenLattice API
 * OpenLattice API
 *
 * The version of the OpenAPI document: 0.0.1
 * Contact: support@openlattice.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

package org.openapitools.client.api;

import org.openapitools.client.ApiInvoker;
import org.openapitools.client.ApiException;
import org.openapitools.client.Pair;

import org.openapitools.client.model.*;

import java.util.*;

import com.android.volley.Response;
import com.android.volley.VolleyError;

import org.openapitools.client.model.DataSet;
import org.openapitools.client.model.DataSetColumn;
import java.util.*;
import org.openapitools.client.model.SecurableObjectMetadataUpdate;
import java.util.UUID;

import org.apache.http.HttpEntity;
import org.apache.http.entity.mime.MultipartEntityBuilder;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.concurrent.ExecutionException;
import java.util.concurrent.TimeoutException;

public class MetadataApi {
  String basePath = "https://api.openlattice.com";
  ApiInvoker apiInvoker = ApiInvoker.getInstance();

  public void addHeader(String key, String value) {
    getInvoker().addDefaultHeader(key, value);
  }

  public ApiInvoker getInvoker() {
    return apiInvoker;
  }

  public void setBasePath(String basePath) {
    this.basePath = basePath;
  }

  public String getBasePath() {
    return basePath;
  }

  /**
  * Gets the dataset column metadata objects using data ID and column ID
  * 
   * @param dataId 
   * @param columnId 
   * @return DataSetColumn
  */
  public DataSetColumn getDataSetColumnMetadata (UUID dataId, UUID columnId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'dataId' is set
    if (dataId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'dataId' when calling getDataSetColumnMetadata",
        new ApiException(400, "Missing the required parameter 'dataId' when calling getDataSetColumnMetadata"));
    }
    // verify the required parameter 'columnId' is set
    if (columnId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'columnId' when calling getDataSetColumnMetadata",
        new ApiException(400, "Missing the required parameter 'columnId' when calling getDataSetColumnMetadata"));
    }

    // create path and map variables
    String path = "/datastore/metadata/columns/{dataId}/{columnId}".replaceAll("\\{" + "dataId" + "\\}", apiInvoker.escapeString(dataId.toString())).replaceAll("\\{" + "columnId" + "\\}", apiInvoker.escapeString(columnId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (DataSetColumn) ApiInvoker.deserialize(localVarResponse, "", DataSetColumn.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Gets the dataset column metadata objects using data ID and column ID
   * 
   * @param dataId    * @param columnId 
  */
  public void getDataSetColumnMetadata (UUID dataId, UUID columnId, final Response.Listener<DataSetColumn> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'dataId' is set
    if (dataId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'dataId' when calling getDataSetColumnMetadata",
        new ApiException(400, "Missing the required parameter 'dataId' when calling getDataSetColumnMetadata"));
    }
    // verify the required parameter 'columnId' is set
    if (columnId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'columnId' when calling getDataSetColumnMetadata",
        new ApiException(400, "Missing the required parameter 'columnId' when calling getDataSetColumnMetadata"));
    }

    // create path and map variables
    String path = "/datastore/metadata/columns/{dataId}/{columnId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "dataId" + "\\}", apiInvoker.escapeString(dataId.toString())).replaceAll("\\{" + "columnId" + "\\}", apiInvoker.escapeString(columnId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((DataSetColumn) ApiInvoker.deserialize(localVarResponse,  "", DataSetColumn.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Gets all data set column metadata objects that caller has READ on that belong to given data set ids
  * 
   * @param requestBody 
   * @return Map<String, List<DataSetColumn>>
  */
  public Map<String, List<DataSetColumn>> getDataSetColumnsMetadata (List<String> requestBody) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = requestBody;

    // create path and map variables
    String path = "/datastore/metadata/columns";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Map<String, List<DataSetColumn>>) ApiInvoker.deserialize(localVarResponse, "map", List.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Gets all data set column metadata objects that caller has READ on that belong to given data set ids
   * 
   * @param requestBody 
  */
  public void getDataSetColumnsMetadata (List<String> requestBody, final Response.Listener<Map<String, List<DataSetColumn>>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = requestBody;


    // create path and map variables
    String path = "/datastore/metadata/columns".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Map<String, List<DataSetColumn>>) ApiInvoker.deserialize(localVarResponse,  "map", List.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Gets dataset metadata object with given data set ID
  * 
   * @param dataId 
   * @return DataSet
  */
  public DataSet getDataSetMetadata (UUID dataId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'dataId' is set
    if (dataId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'dataId' when calling getDataSetMetadata",
        new ApiException(400, "Missing the required parameter 'dataId' when calling getDataSetMetadata"));
    }

    // create path and map variables
    String path = "/datastore/metadata/datasets/{dataId}".replaceAll("\\{" + "dataId" + "\\}", apiInvoker.escapeString(dataId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (DataSet) ApiInvoker.deserialize(localVarResponse, "", DataSet.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Gets dataset metadata object with given data set ID
   * 
   * @param dataId 
  */
  public void getDataSetMetadata (UUID dataId, final Response.Listener<DataSet> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'dataId' is set
    if (dataId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'dataId' when calling getDataSetMetadata",
        new ApiException(400, "Missing the required parameter 'dataId' when calling getDataSetMetadata"));
    }

    // create path and map variables
    String path = "/datastore/metadata/datasets/{dataId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "dataId" + "\\}", apiInvoker.escapeString(dataId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((DataSet) ApiInvoker.deserialize(localVarResponse,  "", DataSet.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Gets the dataset metadata objects given data set ids the caller has READ permissions on
  * 
   * @param requestBody 
   * @return Map<String, DataSet>
  */
  public Map<String, DataSet> getDataSetsMetadata (List<String> requestBody) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = requestBody;

    // create path and map variables
    String path = "/datastore/metadata/datasets";

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Map<String, DataSet>) ApiInvoker.deserialize(localVarResponse, "map", DataSet.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Gets the dataset metadata objects given data set ids the caller has READ permissions on
   * 
   * @param requestBody 
  */
  public void getDataSetsMetadata (List<String> requestBody, final Response.Listener<Map<String, DataSet>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = requestBody;


    // create path and map variables
    String path = "/datastore/metadata/datasets".replaceAll("\\{format\\}","json");

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "POST", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Map<String, DataSet>) ApiInvoker.deserialize(localVarResponse,  "map", DataSet.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Gets all data set column metadata objects that caller has READ on that belong to given data set ids
  * 
   * @param organizationId 
   * @return Map<String, DataSet>
  */
  public Map<String, DataSet> getOrganizationDataSetsMetadata (UUID organizationId) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = null;
    // verify the required parameter 'organizationId' is set
    if (organizationId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organizationId' when calling getOrganizationDataSetsMetadata",
        new ApiException(400, "Missing the required parameter 'organizationId' when calling getOrganizationDataSetsMetadata"));
    }

    // create path and map variables
    String path = "/datastore/metadata/datasets/organizations/{organizationId}".replaceAll("\\{" + "organizationId" + "\\}", apiInvoker.escapeString(organizationId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return (Map<String, DataSet>) ApiInvoker.deserialize(localVarResponse, "map", DataSet.class);
      } else {
         return null;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Gets all data set column metadata objects that caller has READ on that belong to given data set ids
   * 
   * @param organizationId 
  */
  public void getOrganizationDataSetsMetadata (UUID organizationId, final Response.Listener<Map<String, DataSet>> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = null;

    // verify the required parameter 'organizationId' is set
    if (organizationId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'organizationId' when calling getOrganizationDataSetsMetadata",
        new ApiException(400, "Missing the required parameter 'organizationId' when calling getOrganizationDataSetsMetadata"));
    }

    // create path and map variables
    String path = "/datastore/metadata/datasets/organizations/{organizationId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "organizationId" + "\\}", apiInvoker.escapeString(organizationId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "GET", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
            try {
              responseListener.onResponse((Map<String, DataSet>) ApiInvoker.deserialize(localVarResponse,  "map", DataSet.class));
            } catch (ApiException exception) {
               errorListener.onErrorResponse(new VolleyError(exception));
            }
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Applies the given metadata updates to the data set column given dataset and column Ids. Must be OWNER of the column.
  * 
   * @param dataId 
   * @param columnId 
   * @param securableObjectMetadataUpdate 
   * @return void
  */
  public void updateDataSetColumnMetadata (UUID dataId, UUID columnId, SecurableObjectMetadataUpdate securableObjectMetadataUpdate) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = securableObjectMetadataUpdate;
    // verify the required parameter 'dataId' is set
    if (dataId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'dataId' when calling updateDataSetColumnMetadata",
        new ApiException(400, "Missing the required parameter 'dataId' when calling updateDataSetColumnMetadata"));
    }
    // verify the required parameter 'columnId' is set
    if (columnId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'columnId' when calling updateDataSetColumnMetadata",
        new ApiException(400, "Missing the required parameter 'columnId' when calling updateDataSetColumnMetadata"));
    }

    // create path and map variables
    String path = "/datastore/metadata/update/{dataId}/{columnId}".replaceAll("\\{" + "dataId" + "\\}", apiInvoker.escapeString(dataId.toString())).replaceAll("\\{" + "columnId" + "\\}", apiInvoker.escapeString(columnId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Applies the given metadata updates to the data set column given dataset and column Ids. Must be OWNER of the column.
   * 
   * @param dataId    * @param columnId    * @param securableObjectMetadataUpdate 
  */
  public void updateDataSetColumnMetadata (UUID dataId, UUID columnId, SecurableObjectMetadataUpdate securableObjectMetadataUpdate, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = securableObjectMetadataUpdate;

    // verify the required parameter 'dataId' is set
    if (dataId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'dataId' when calling updateDataSetColumnMetadata",
        new ApiException(400, "Missing the required parameter 'dataId' when calling updateDataSetColumnMetadata"));
    }
    // verify the required parameter 'columnId' is set
    if (columnId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'columnId' when calling updateDataSetColumnMetadata",
        new ApiException(400, "Missing the required parameter 'columnId' when calling updateDataSetColumnMetadata"));
    }

    // create path and map variables
    String path = "/datastore/metadata/update/{dataId}/{columnId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "dataId" + "\\}", apiInvoker.escapeString(dataId.toString())).replaceAll("\\{" + "columnId" + "\\}", apiInvoker.escapeString(columnId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
  /**
  * Applies the given metadata updates to the data set given data set id. Must be OWNER of the dataset.
  * 
   * @param dataId 
   * @param securableObjectMetadataUpdate 
   * @return void
  */
  public void updateDataSetMetadata (UUID dataId, SecurableObjectMetadataUpdate securableObjectMetadataUpdate) throws TimeoutException, ExecutionException, InterruptedException, ApiException {
    Object postBody = securableObjectMetadataUpdate;
    // verify the required parameter 'dataId' is set
    if (dataId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'dataId' when calling updateDataSetMetadata",
        new ApiException(400, "Missing the required parameter 'dataId' when calling updateDataSetMetadata"));
    }

    // create path and map variables
    String path = "/datastore/metadata/update/{dataId}".replaceAll("\\{" + "dataId" + "\\}", apiInvoker.escapeString(dataId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();
    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
    }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      String localVarResponse = apiInvoker.invokeAPI (basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames);
      if (localVarResponse != null) {
         return ;
      } else {
         return ;
      }
    } catch (ApiException ex) {
       throw ex;
    } catch (InterruptedException ex) {
       throw ex;
    } catch (ExecutionException ex) {
      if (ex.getCause() instanceof VolleyError) {
        VolleyError volleyError = (VolleyError)ex.getCause();
        if (volleyError.networkResponse != null) {
          throw new ApiException(volleyError.networkResponse.statusCode, volleyError.getMessage());
        }
      }
      throw ex;
    } catch (TimeoutException ex) {
      throw ex;
    }
  }

      /**
   * Applies the given metadata updates to the data set given data set id. Must be OWNER of the dataset.
   * 
   * @param dataId    * @param securableObjectMetadataUpdate 
  */
  public void updateDataSetMetadata (UUID dataId, SecurableObjectMetadataUpdate securableObjectMetadataUpdate, final Response.Listener<String> responseListener, final Response.ErrorListener errorListener) {
    Object postBody = securableObjectMetadataUpdate;

    // verify the required parameter 'dataId' is set
    if (dataId == null) {
      VolleyError error = new VolleyError("Missing the required parameter 'dataId' when calling updateDataSetMetadata",
        new ApiException(400, "Missing the required parameter 'dataId' when calling updateDataSetMetadata"));
    }

    // create path and map variables
    String path = "/datastore/metadata/update/{dataId}".replaceAll("\\{format\\}","json").replaceAll("\\{" + "dataId" + "\\}", apiInvoker.escapeString(dataId.toString()));

    // query params
    List<Pair> queryParams = new ArrayList<Pair>();
    // header params
    Map<String, String> headerParams = new HashMap<String, String>();
    // form params
    Map<String, String> formParams = new HashMap<String, String>();



    String[] contentTypes = {
      "application/json"
    };
    String contentType = contentTypes.length > 0 ? contentTypes[0] : "application/json";

    if (contentType.startsWith("multipart/form-data")) {
      // file uploading
      MultipartEntityBuilder localVarBuilder = MultipartEntityBuilder.create();
      

      HttpEntity httpEntity = localVarBuilder.build();
      postBody = httpEntity;
    } else {
      // normal form params
          }

    String[] authNames = new String[] { "http_auth", "openlattice_auth" };

    try {
      apiInvoker.invokeAPI(basePath, path, "PATCH", queryParams, postBody, headerParams, formParams, contentType, authNames,
        new Response.Listener<String>() {
          @Override
          public void onResponse(String localVarResponse) {
              responseListener.onResponse(localVarResponse);
          }
      }, new Response.ErrorListener() {
          @Override
          public void onErrorResponse(VolleyError error) {
            errorListener.onErrorResponse(error);
          }
      });
    } catch (ApiException ex) {
      errorListener.onErrorResponse(new VolleyError(ex));
    }
  }
}
